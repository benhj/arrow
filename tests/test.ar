;;; a function that takes three args:
;;; a expected values
;;; b evaluated value
;;; score current test score
fn test(a, b, score) -> score {
    0 -> pass;
    if(a = b) { score + 1 -> score; }
}

fn test_false(a, b, score) -> score {
    0 -> pass;
    if(a /= b) {
        score + 1 -> score; 
    }
}

;;; a function that 'pretty-prints'
;;; the overall test function score
;;; and notes the number of passes
;;; and the number of failures.
fn print_score(exp, act) {
    if(act < 10) {
        pr "0";
    }
    pr act;
    pr "/";
    if(exp < 10) {
        pr "0";
    }
    pr exp;
    if(act = exp) {
        pr "     PASS";
    } else {
        pr "     FAILURE";
    }
}

;;; tests precendence of operations
fn precendence() {
    0 -> score;
    1 -> a;
    2 -> b;
    3 -> c;
    4 -> d;

    -a * b -> res;
    test(-2, res, score) -> score;

    a + b + c -> res;
    test(6, res, score) -> score;

    a + b - c -> res;
    test(0, res, score) -> score;

    a * b * c -> res;
    test(6, res, score) -> score;

    a + b * c + d -> res;
    test(11, res, score) -> score;

    5 > 4 = 3 < 4 -> res;
    test(true, res, score) -> score;

    5 < 4 /= 3 > 4 -> res;
    test(false, res, score) -> score;

    3 + 4 * 5 = 3 * 1 + 4 * 5 -> res;
    test(true, res, score) -> score;

    print_score(8, score);
    prn "     (precendence)";
}

;;; tests basic primitive value creation
fn basic() {
    0 -> score;

    1 -> a;
    1.1 -> b;
    true -> c;
    false -> d;
    'c' -> e;
    -5 -> f;
    -10.8 -> g;

    test(1, a, score)      -> score;
    test(1.1, b, score)    -> score;
    test(true, c, score)   -> score;
    test(false, d, score)  -> score;
    test('c', e, score)    -> score;
    test(-5, f, score)     -> score;
    test(-10.8, g, score)  -> score;
    print_score(7, score);
    prn "     (basic)";
}

;;; basic integer array creation
fn int_array() {
    0 -> score;

    ;;; basic creation
    0 -> $z;
    {1} -> a;
    {1, 2} -> b;
    3 -> $b;

    test({0}, z, score) -> score;
    test({1}, a, score) -> score;
    test({1,2,3}, b, score) -> score;

    ;;; element updating
    4 -> b:2;
    test({1,2,4}, b, score) -> score;

    ;;; element retrieval
    b:1 -> x;
    test(2, x, score) -> score;

    ;;; for loop test
    0 -> index;
    for i in b {
        test(b:index, i, score) -> score;
        index + 1 -> index;
    }

    print_score(8, score);
    prn "     (int_array)";
}

;;; basic real array creation
fn real_array() {
    0 -> score;

    ;;; basic creation
    3.4 -> $z;
    {1.1} -> a;
    {1.1, 2.2} -> b;
    3.3 -> $b;

    test({3.4}, z, score) -> score;
    test({1.1}, a, score) -> score;
    test({1.1, 2.2, 3.3}, b, score) -> score;

    ;;; element updating
    4.4 -> b:1;
    test({1.1, 4.4, 3.3}, b, score) -> score;

    ;;; adding an int
    4 -> $b;
    test({1.1, 4.4, 3.3, 4.0}, b, score) -> score;

    ;;; element retrieval
    b:0 -> x;
    test(1.1, x, score) -> score;

    ;;; for loop test
    0 -> index;
    for i in b {
        test(b:index, i, score) -> score;
        index + 1 -> index;
    }

    print_score(10, score);
    prn "     (real_array)";
}

;;; basic string array creation
fn string_array() {
    0 -> score;

    ;;; basic creation
    "world" -> $z;
    {"hello"} -> a;
    {"one", "two"} -> b;
    "three" -> $b;

    test({"world"}, z, score) -> score;
    test({"hello"}, a, score) -> score;
    test({"one", "two", "three"}, b, score) -> score;

    ;;; element updating
    "four" -> b:0;
    test({"four", "two", "three"}, b, score) -> score;

    ;;; element retrieval
    b:2 -> x;
    test("three", x, score) -> score;

    ;;; for loop test
    0 -> index;
    for i in b {
        test(b:index, i, score) -> score;
        index + 1 -> index;
    }

    print_score(8, score);
    prn "     (string_array)";
}

;;; basic byte array creation
fn byte_array() {
    0 -> score;

    ;;; basic creation
    'z' -> $z;
    {'h'} -> a;
    {'a', 'b'} -> b;
    'c' -> $b;

    test({'z'}, z, score) -> score;
    test({'h'}, a, score) -> score;
    test({'a', 'b', 'c'}, b, score) -> score;

    ;;; element updating
    'd' -> b:0;
    test({'d', 'b', 'c'}, b, score) -> score;

    ;;; element retrieval
    b:1 -> x;
    test('b', x, score) -> score;

    ;;; for loop test
    0 -> index;
    for i in b {
        test(b:index, i, score) -> score;
        index + 1 -> index;
    }

    print_score(8, score);
    prn "     (byte_array)";
}

fn strings() {
    0 -> score;
    "hello" -> str;
    test("hello", str, score) -> score;
    ',' -> $str;
    test("hello,", str, score) -> score;
    str + " world" -> str;
    test("hello, world", str, score) -> score;
    str + '.' -> str;
    test("hello, world.", str, score) -> score;
    str:0 -> h;
    test('h', h, score) -> score;
    '!' -> str:5;
    test("hello! world.", str, score) -> score;

    ;;; for loop test
    0 -> index;
    for i in str {
        test(str:index, i, score) -> score;
        index + 1 -> index;
    }

    print_score(19, score);
    prn "     (strings)";
}

fn lists() {
    0 -> score;
    [one two three] -> L;
    test([one two three], L, score) -> score;
    "four" -> $L;
    test([one two three four], L, score) -> score;
    [^^L five] -> L;
    test([one two three four five], L, score) -> score;
    [zero ^^L] -> L;
    test([zero one two three four five], L, score) -> score;
    "minus" -> a;
    [^a ^^L] -> L;
    test([minus zero one two three four five], L, score) -> score;
    "pos" -> b;
    [^^L ^b] -> L;
    test([minus zero one two three four five pos], L, score) -> score;

    ;;; nested list tests
    [one two three [nested [bit]]] -> L;
    test([one two three [nested [bit]]], L, score) -> score;
    [another nesting] -> sub;
    [^sub ^^L] -> L;
    test([[another nesting] one two three [nested [bit]]], L, score) -> score;
    [some bits] -> bits;
    [one two three [nested ^bits]] -> L;
    test([one two three [nested [some bits]]], L, score) -> score;
    [one two three [nested ^^bits]] -> L;
    test([one two three [nested some bits]], L, score) -> score;

    ;;; for loop test
    0 -> index;
    for i in L {
        test(L:index, i, score) -> score;
        index + 1 -> index;
    }

    print_score(14, score);
    prn "     (lists)";
}

fn pattern_matcher() {
    0 -> score;
    [] matches [] -> m;
    test(true, m, score) -> score;
    [one two three] matches [one two three] -> m;
    test(true, m, score) -> score;
    [one two three] matches [= = =] -> m;
    test(true, m, score) -> score;
    [one two three] matches [==] -> m;
    test(true, m, score) -> score;
    [one two three] matches [= ==] -> m;
    test(true, m, score) -> score;
    [one two three] matches [one ==] -> m;
    test(true, m, score) -> score;
    [one two three] matches [== two three] -> m;
    test(true, m, score) -> score;
    [one two three] matches [== three] -> m;
    test(true, m, score) -> score;
    [one two three] matches [= two three] -> m;
    test(true, m, score) -> score;
    [one two three] matches [= two =] -> m;
    test(true, m, score) -> score;
    [one two three] matches [== two ==] -> m;
    test(true, m, score) -> score;

    ;;; extraction
    [one two three] matches [?a ?b ?c] -> m;
    test(true, m, score) -> score;
    test("one", a, score) -> score;
    test("two", b, score) -> score;
    test("three", c, score) -> score;
    [one two three] matches [??a] -> m;
    test(true, m, score) -> score;
    test([one two three], a, score) -> score;
    [one two three] matches [??a two three] -> m;
    test(true, m, score) -> score;
    test([one], a, score) -> score;
    [one two three] matches [?a two three] -> m;
    test(true, m, score) -> score;
    test("one", a, score) -> score;
    [one two three] matches [??a three] -> m;
    test(true, m, score) -> score;
    test([one two], a, score) -> score;
    [one two three] matches [one ??a] -> m;
    test(true, m, score) -> score;
    test([two three], a, score) -> score;
    [one two three] matches [one ??a three] -> m;
    test(true, m, score) -> score;
    test([two], a, score) -> score;
    [one two three] matches [one ?a three] -> m;
    test(true, m, score) -> score;
    test("two", a, score) -> score;
    [one two three] matches [= ?a =] -> m;
    test(true, m, score) -> score;
    test("two", a, score) -> score;
    [one two three] matches [?a two ?b] -> m;
    test(true, m, score) -> score;
    test("one", a, score) -> score;
    test("three", b, score) -> score;
    [one two three] matches [??a two ??b] -> m;
    test(true, m, score) -> score;
    test([one], a, score) -> score;
    test([three], b, score) -> score;

    print_score(37, score);
    prn "     (pattern_matcher)";
}

fn maps() {
    ;;; store arbitrary elements in a map
    1 -> map:"a";
    2.2 -> map:"b";
    true -> map:"c";
    'a' -> map:"d";
    "hello" -> map:"e";
    [one two three] -> map:"f";

    ;;; get an array of all keys
    map_keys(map) -> keys;

    ;;; loop over keys and store values in vals
    0 -> index;
    [] -> vals;
    for key in keys {
        map:key -> value;
        [^^vals ^value] -> vals;
    }

    ;;; interpret list as an anonymous object
    0 -> score;
    test((map:"a", map:"b", map:"c", map:"d", map:"e", map:"f"), vals, score) -> score;

    print_score(1, score);
    prn "     (maps)";
}

fn anonymous_objects() {
    0 -> score;
    (1, [one two three], 1.1, true) -> object;

    ;;; element access
    test(object:0, 1, score) -> score;
    test(object:1, [one two three], score) -> score;
    test(object:2, 1.1, score) -> score;
    test(object:3, true, score) -> score;

    ;;; an anonymous object can be interpreted as a list
    object:0 -> a;
    object:1 -> b;
    object:2 -> c;
    object:3 -> d;
    [^a ^b ^c ^d] -> list;
    test(object, list, score) -> score;

    ;;; element update
    "hello" -> object:2;
    object:2 -> c;
    [^a ^b ^c ^d] -> list;
    test(object, list, score) -> score;

    print_score(6, score);
    prn "     (anonymous_objects)";
}

fn for_loop_multi_element() {
    0 -> score;

    ;;; build a copy of a list using single
    ;;; for-loop element access
    [one two three] -> list;
    [] -> copy;
    for i in list {
        [^^copy ^i] -> copy;
    }
    test(list, copy, score) -> score;

    ;;; build a new list using double element access
    [] -> copy;
    "" -> j;
    for i,j in list {
        [^^copy ^i ^j] -> copy;
    }

    ;;; resulting list should look like this
    [one two two three three three] -> res;
    test(copy, res, score) -> score;

    print_score(2, score);
    prn "     (for_loop_multi_element)";
}

fn builtin_length() {
    0 -> score;

    test(5, length("hello"), score) -> score;
    test(3, length([one two three]), score) -> score;
    test(4, length({1, 2, 3, 4}), score) -> score;
    test(5, length({1.1, 2.2, 3.3, 4.4, 5.5}), score) -> score;
    test(2, length({true, false}), score) -> score;
    test(3, length({'a', 'b', 'c'}), score) -> score;

    print_score(6, score);
    prn "     (builtin_length)";
}

pod pod_for_types_test(mema);

fn types() {
    0 -> score;
    pod_for_types_test(1) -> p;

    test("int", type(1), score) -> score;
    test("real", type(3.14), score) -> score;
    test("list", type([one two]), score) -> score;
    test("byte", type('c'), score) -> score;
    test("string", type("hello"), score) -> score;
    test("ints", type({1, 2, 3, 4}), score) -> score;
    test("reals", type({1.1, 2.2, 3.3, 4.4, 5.5}), score) -> score;
    test("bools", type({true, false}), score) -> score;
    test("bytes", type({'a', 'b', 'c'}), score) -> score;
    test("strings", type({"hello", "world"}), score) -> score;
    test("pod", type(p), score) -> score;

    ;;; type not found for identifier, so is identified as 'nil'
    test("nil", type(a), score) -> score;

    ;;; make sure that type can be pulled from identifier
    1 -> a;
    test("int", type(a), score) -> score;

    print_score(13, score);
    prn "     (types)";
}

fn break_command() {
    0 -> score;

    0 -> i;
    ;;; break when i is five
    while(i < 10) {
        i + 1 -> i;
        if(i = 5) {
            break;
        }
    }
    test(5, i, score) -> score;

    0 -> i;
    0 -> j;
    ;;; nested break -- should only break on inner
    while(i < 10) {
        i + 1 -> i;
        while(j < 10) {
            if(j = 5) {
                break;
            }
            j + 1 -> j;
        }
    }
    test(10, i, score) -> score;
    test(5, j, score) -> score;

    ;;; break with for-loop
    [one two three four five] -> list;
    "" -> i;
    for i in list {
        if(i = "three") {
            break;
        }
    }
    test("three", i, score) -> score;

    ;;; break with repeat loop
    0 -> i;
    repeat 10 times {
        i + 1 -> i;
        if(i = 5) {
            break;
        }
    }
    test(5, i, score) -> score;

    ;;; nested break statement; only break on inner
    0 -> i;
    0 -> j;
    repeat 10 times {
        i + 1 -> i;
        0 -> j;
        repeat 10 times {
            j + 1 -> j;
            if(j = 5) {
                break;
            }
        }
    }
    test(10, i, score) -> score;
    test(5, j, score) -> score;

    print_score(7, score);
    prn "     (break_command)";

}

fn continue_command()
{
    0 -> score;
    0 -> i;
    0 -> j;
    while (i < 10) {
        if i = 5 {
            i + 1 -> i;
            continue;
        }
        j + 1 -> j;
        i + 1 -> i;
    }

    test(10, i, score) -> score;
    test(9, j, score) -> score;

    [one two three four five] -> list;
    "" -> x;
    0 -> j;
    for x in list {
        if(x = "three") {
            continue;
        }
        1 + j -> j;
    }
    test(4, j, score) -> score;

    0 -> i;
    repeat 10 times {
        if i = 5 {
            continue;
        }
        1 + i -> i;
    }
    test(5, i, score) -> score;

    print_score(4, score);
    prn "     (continue_command)";
}

;;; pods (essentially POD structs)
pod data(mema, memb, memc);

fn pods() {
    0 -> score;

    ;;; creation
    data(1, [one two three], 3.14) -> dat;

    test(1, dat:mema, score) -> score;
    test([one two three], dat:memb, score) -> score;
    test(3.14, dat:memc, score) -> score;

    ;;; updating
    "hello" -> dat:memb;
    test("hello", dat:memb, score) -> score;

    ;;; an array of pods
    data(1, [one two three], 3.14) -> dat;
    data(2, [four five six], 1.23) -> dat_b;
    {dat, dat_b} -> pods;

    ;;; extract
    pods:0 -> first;
    pods:1 -> second;

    ;;; sanity check on pod data
    test(1.23, second:memc, score) -> score;
    test([one two three], first:memb, score) -> score;

    ;;; $syntax
    dat -> $podvec;
    dat_b -> $podvec;

    ;;; extract
    podvec:0 -> first;
    podvec:1 -> second;
    test(1, first:mema, score) -> score;
    test(1.23, second:memc, score) -> score;

    ;;; equality
    data(1, [one two three], 3.14) -> datx;
    data(1, [one two three], 3.14) -> daty;
    data(2, [four five six], 1.23) -> datz;

    test(datx, daty, score) -> score;
    test_false(datx, datz, score) -> score;

    print_score(10, score);
    prn "     (pods)";
}

fn wildcard_eq_builtin() {
    0 -> score;
    wildcard_eq("hello.txt", "*.txt") -> res;
    test(res, true, score) -> score;
    wildcard_eq("hello.txt", "*.pdf") -> res;
    test(res, false, score) -> score;
    wildcard_eq("hello.txt", "*") -> res;
    test(res, true, score) -> score;

    print_score(3, score);
    prn "     (wildcard_eq_builtin)";
}

fn multi_arrays() {
    0 -> score;
    {1, 2} -> a;
    {3, 4} -> b;
    {a, b} -> arrays;
    test(arrays, {{1,2},{3,4}}, score) -> score;
    {5, 6} -> $arrays;
    test(arrays, {{1,2},{3,4},{5,6}}, score) -> score;

    {"hello", "world"} -> $arrays_2;
    {true, false} -> $arrays_2;
    {1.1, 2.2} -> $arrays_2;
    {'a','b'} -> $arrays_2;

    test(arrays_2, {{"hello","world"},{true,false},{1.1,2.2},{'a','b'}}, score) -> score;

    print_score(3, score);
    prn "     (multi_arrays)";
}

start {
    basic();
    precendence();
    int_array();
    real_array();
    string_array();
    byte_array();
    strings();
    lists();
    multi_arrays();
    pattern_matcher();
    maps();
    anonymous_objects();
    for_loop_multi_element();
    builtin_length();
    types();
    break_command();
    continue_command();
    pods();
    wildcard_eq_builtin();
}
