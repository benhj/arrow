;;; Simulate N walkers with personalities
;;; basic HUD overlay with trail length, last tile, and step count
;;; also spawns new items evey 100 steps
;;; UPDATED: Walkers with personalities ('aggressive' goal-seeking, 'discover' exploring)
;;; UPDATED: Implemented abs and min functions
;;; UPDATED: Aggressive walker now truly seeks goals by prioritizing direct alignment and minimizing distance
;;; UPDATED: Discover walker now has undulatory movement by favoring slight turns
;;; FIX: Walkers are now visible again (fixed bug in allValidOptions population)
;;; NEW: Supports N number of walkers, passed as a third argument
;;; NEW: Draws a box around the grid for better visualization
;;; NEW: Accepts separate gridWidth and gridHeight parameters for aspect ratio tuning

;;; --- Utility Functions ---

;;; Returns the absolute value of a number
fn abs(n) -> result {
    n -> result;
    if n < 0 {
        0 - n -> result;
    }
}

;;; Returns the minimum of two numbers
fn min(a, b) -> result {
    b -> result;
    if a < b {
        a -> result;
    }
}

;;; Repeats a character 'count' times
fn repeat(char, count) -> result {
    "" -> result;
    0 -> i;
    while i < count {
        result + char -> result;
        i + 1 -> i;
    }
    result -> result;
}

;;; --- Grid and Item Management Functions ---

;;; Initializes a grid with specified width and height filled with spaces (" ")
fn initialize(gridWidth, gridHeight) -> grid {
    0 -> y;
    [] -> grid;
    while y < gridHeight {
        0 -> x;
        [] -> row;
        while x < gridWidth {
            " " -> $row;
            x + 1 -> x;
        }
        row -> $grid;
        y + 1 -> y;
    }
    grid -> grid;
}

;;; Randomly places goal, slow, and teleport tiles
fn placeItems(grid, gridWidth, gridHeight) -> grid {
    0 -> i;
    while i < 20 {
        random(gridWidth - 1) -> x;
        random(gridHeight - 1) -> y;
        grid:y -> row;
        row:x -> cell;
        if cell = " " {
            "◍" -> row:x;
            row -> grid:y;
            i + 1 -> i;
        }
    }
    0 -> i;
    while i < 3 {
        random(gridWidth - 1) -> x;
        random(gridHeight - 1) -> y;
        grid:y -> row;
        row:x -> cell;
        if cell = " " {
            "S" -> row:x;
            row -> grid:y;
            i + 1 -> i;
        }
    }
    0 -> i;
    while i < 2 {
        random(gridWidth - 1) -> x;
        random(gridHeight - 1) -> y;
        grid:y -> row;
        row:x -> cell;
        if cell = " " {
            "T" -> row:x;
            row -> grid:y;
            i + 1 -> i;
        }
    }
    grid -> grid;
}

;;; Periodically place a few new items if space allows
fn respawnItems(grid, gridWidth, gridHeight) -> grid {
    0 -> count;
    while count < 1 {  ;;; spawn 1 new item per respawn, adjust as you want
        random(2) -> r_idx;
        "" -> r_char;
        if r_idx = 0 {
            "◍" -> r_char;
        } elseif r_idx = 1 {
            "S" -> r_char;
        } else {
            "T" -> r_char;
        }

        true -> searching;
        while searching {
            random(gridWidth - 1) -> x;
            random(gridHeight - 1) -> y;
            grid:y -> row;
            row:x -> cell;
            if cell = " " {
                r_char -> row:x;
                row -> grid:y;
                count + 1 -> count;
                false -> searching;
            }
        }
    }
    grid -> grid;
}

;;; Prints the grid row by row with a box border
fn print(grid, gridWidth) {
    ;;; Top border
    prn "┌" + repeat("─", gridWidth) + "┐";

    ;;; Grid rows with side borders
    for row in grid {
        "" -> row_str;
        for char in row {
            cellColor(char) -> theColor;
            row_str + theColor -> row_str;
            row_str + char -> row_str;
            row_str + "\033[0m" -> row_str;
        }
        prn "│" + row_str + "│";
    }

    ;;; Bottom border
    prn "└" + repeat("─", gridWidth) + "┘";
}

;;; Calculates Manhattan distance between two points on a toroidal grid
fn manhattanDistance(pos1, pos2, gridWidth, gridHeight) -> dist {
    pos1:0 -> x1;
    pos1:1 -> y1;
    pos2:0 -> x2;
    pos2:1 -> y2;

    abs(x1 - x2) -> dx;
    abs(y1 - y2) -> dy;
    min(dx, gridWidth - dx) -> wrapDx;
    min(dy, gridHeight - dy) -> wrapDy;

    wrapDx + wrapDy -> dist;
}

;;; Finds the closest 'G' tile on the grid, returns its position or { -1, -1 } if none found
fn findClosestGoal(grid, pos, gridWidth, gridHeight) -> goalPos {
    pos:0 -> startX;
    pos:1 -> startY;
    { -1, -1 } -> closestGoal;
    (gridWidth * gridHeight) + 1 -> minDist; ;;; A very large number for initial minimum distance

    0 -> y;
    while y < gridHeight {
        0 -> x;
        grid:y -> row;
        while x < gridWidth {
            row:x -> cell;
            if cell = "◍" {
                {x, y} -> currentGoalPos;
                manhattanDistance(pos, currentGoalPos, gridWidth, gridHeight) -> dist;
                if dist < minDist {
                    dist -> minDist;
                    currentGoalPos -> closestGoal;
                }
            }
            x + 1 -> x;
        }
        y + 1 -> y;
    }
    closestGoal -> goalPos;
}

;;; Returns a list of directions that represent 'straight' and 'slight turns' (45 degrees)
;;; relative to the given previous direction.
fn getUndulatoryNeighbors(prevdir) -> neighbors {
    [] -> neighbors;
    prevdir:0 -> px;
    prevdir:1 -> py;

    ;;; For initial state {0,0}, include all cardinal/diagonal directions as potential starting undulation
    if px = 0 && py = 0 {
        { {1, 0}, {-1, 0}, {0, 1}, {0, -1}, {-1, -1}, {1, -1}, {-1, 1}, {1, 1} } -> allDirs;
        for d in allDirs {
            d -> $neighbors;
        }
        neighbors -> neighbors;
        return;
    }

    ;;; Include straight direction
    prevdir -> $neighbors;

    ;;; Include 45-degree rotational neighbors
    if px = 1 && py = 0 { ;;; East {1,0}
        {1,1} -> $neighbors; ;;; SE
        {1,-1} -> $neighbors; ;;; NE
    } elseif px = -1 && py = 0 { ;;; West {-1,0}
        {-1,1} -> $neighbors; ;;; SW
        {-1,-1} -> $neighbors; ;;; NW
    } elseif px = 0 && py = 1 { ;;; South {0,1}
        {1,1} -> $neighbors; ;;; SE
        {-1,1} -> $neighbors; ;;; SW
    } elseif px = 0 && py = -1 { ;;; North {0,-1}
        {1,-1} -> $neighbors; ;;; NE
        {-1,-1} -> $neighbors; ;;; NW
    } elseif px = 1 && py = 1 { ;;; Southeast {1,1}
        {1,0} -> $neighbors; ;;; E
        {0,1} -> $neighbors; ;;; S
    } elseif px = -1 && py = 1 { ;;; Southwest {-1,1}
        {-1,0} -> $neighbors; ;;; W
        {0,1} -> $neighbors; ;;; S
    } elseif px = 1 && py = -1 { ;;; Northeast {1,-1}
        {1,0} -> $neighbors; ;;; E
        {0,-1} -> $neighbors; ;;; N
    } elseif px = -1 && py = -1 { ;;; Northwest {-1,-1}
        {-1,0} -> $neighbors; ;;; W
        {0,-1} -> $neighbors; ;;; N
    }
    neighbors -> neighbors;
}

;;; UPDATED: Added new attributes for artificial life simulation
;;; UPDATED: Added lastGoalEncounter for 'learner' personality
pod gridpos(grid, pos, moved, path, mode, prevdir, lastTile, trailLength, personality, encounterCount, maxEncounters, energy, maxEnergy, age, maxAge, isAlive, walkerId, lastGoalEncounter);
;;; Moves position by one unit in a direction, avoiding reversals
;;; Updated for "aggressive" and "discover" personalities
;;; UPDATED: Now includes 'learner' personality logic
fn move(GRIDPOS, gridWidth, gridHeight) -> GRIDPOS {
    GRIDPOS:pos -> pos;
    GRIDPOS:grid -> grid;
    GRIDPOS:path -> path;
    GRIDPOS:mode -> mode;
    GRIDPOS:prevdir -> prevdir;
    GRIDPOS:personality -> personality;
    GRIDPOS:encounterCount -> encounterCount;
    GRIDPOS:maxEncounters -> maxEncounters;
    ;;; NEW: Pass new attributes through
    GRIDPOS:energy -> energy;
    GRIDPOS:maxEnergy -> maxEnergy;
    GRIDPOS:age -> age;
    GRIDPOS:maxAge -> maxAge;
    GRIDPOS:isAlive -> isAlive;
    GRIDPOS:walkerId -> walkerId;
    GRIDPOS:lastTile -> lastTile; ;;; Ensure lastTile is passed through correctly
    GRIDPOS:lastGoalEncounter -> lastGoalEncounter; ;;; NEW: lastGoalEncounter

    pos:0 -> x;
    pos:1 -> y;

    [] -> allValidOptions; ;;; All possible moves (cardinal, diagonal, non-reversing, into valid cell)
    [] -> aggressiveOptions; ;;; For aggressive movement
    [] -> discoverOptions; ;;; For discover movement

    { {1, 0}, {-1, 0}, {0, 1}, {0, -1}, {-1, -1}, {1, -1}, {-1, 1}, {1, 1} } -> directions;
    {0, 0} -> dir; ;;; Default direction, will be overwritten

    ;;; Common filtering for all possible directions: non-reversal and valid cell
    0 -> i;
    while i < 8 {
        directions:i -> currentDirOption;
        currentDirOption:0 -> dx;
        currentDirOption:1 -> dy;

        (x + dx + gridWidth) % gridWidth -> nx; ;;; Use gridWidth for X wrap
        (y + dy + gridHeight) % gridHeight -> ny; ;;; Use gridHeight for Y wrap

        grid:ny -> row;
        row:nx -> cell;
        -prevdir:0 -> revdx;
        -prevdir:1 -> revdy;
        if dx = revdx && dy = revdy {
            ;;; Do not add reversed direction
            i + 1 -> i;
        } else {
            if cell = " " || cell = "◍" || cell = "S" || cell = "T" {
                currentDirOption -> $allValidOptions;
            }
            i + 1 -> i;
        }
    }

    [] -> dir; ;;; Selected direction, re-initialized

    if personality = "aggressive" {
        findClosestGoal(grid, pos, gridWidth, gridHeight) -> goalPos;
        goalPos:0 -> gx;
        goalPos:1 -> gy;

        if gx /= -1 { ;;; If a goal is found
            [] -> directAlignedOptions; ;;; For moves that directly align with goal axis
            [] -> distanceMinimizingOptions; ;;; Fallback for any distance reduction

            ;;; Calculate shortest path differences, considering toroidal wrap
            abs(gx - x) -> rawDx;
            abs(gy - y) -> rawDy;
            min(rawDx, gridWidth - rawDx) -> shortestDx; ;;; Use gridWidth for X
            min(rawDy, gridHeight - rawDy) -> shortestDy; ;;; Use gridHeight for Y

            ;;; Determine desired direction components
            0 -> desiredXDir;
            if gx > x {
                if shortestDx = gx - x { 1 -> desiredXDir; } else { -1 -> desiredXDir; }
            } elseif gx < x {
                if shortestDx = x - gx { -1 -> desiredXDir; } else { 1 -> desiredXDir; }
            }

            0 -> desiredYDir;
            if gy > y {
                if shortestDy = gy - y { 1 -> desiredYDir; } else { -1 -> desiredYDir; }
            } elseif gy < y {
                if shortestDy = y - gy { -1 -> desiredYDir; } else { 1 -> desiredYDir; }
            }

            ;;; First pass: Find moves that align directly with goal's axes (e.g., purely horizontal/vertical/diagonal towards goal)
            for currentDirOption in allValidOptions {
                currentDirOption:0 -> cdx;
                currentDirOption:1 -> cdy;

                true -> isAligned;
                if desiredXDir /= 0 && cdx /= desiredXDir { false -> isAligned; }
                if desiredYDir /= 0 && cdy /= desiredYDir { false -> isAligned; }
                if desiredXDir = 0 && cdx /= 0 { false -> isAligned; } ;;; If no X movement needed, don't move X
                if desiredYDir = 0 && cdy /= 0 { false -> isAligned; } ;;; If no Y movement needed, don't move Y

                if isAligned {
                    currentDirOption -> $directAlignedOptions;
                }
            }

            length(directAlignedOptions) -> dalen;
            if dalen > 0 {
                random(dalen - 1) -> i;
                directAlignedOptions:i -> dir;
            } else {
                ;;; Second pass (fallback): Find any move that minimizes Manhattan distance
                (gridWidth * gridHeight) + 1 -> minimizedNewDist; ;;; Use total grid area
                for currentDir in allValidOptions {
                    currentDir:0 -> cdx;
                    currentDir:1 -> cdy;
                    (x + cdx + gridWidth) % gridWidth -> cnx;
                    (y + cdy + gridHeight) % gridHeight -> cny;

                    manhattanDistance({cnx, cny}, goalPos, gridWidth, gridHeight) -> newDist;
                    if newDist < minimizedNewDist {
                        newDist -> minimizedNewDist;
                        [] -> distanceMinimizingOptions;
                        currentDir -> $distanceMinimizingOptions;
                    } elseif newDist = minimizedNewDist {
                        currentDir -> $distanceMinimizingOptions;
                    }
                }
                length(distanceMinimizingOptions) -> dmlen;
                if dmlen > 0 {
                    random(dmlen - 1) -> i;
                    distanceMinimizingOptions:i -> dir;
                }
            }
        }
    } elseif personality = "discover" {
        length(allValidOptions) -> numValidOptions;
        getUndulatoryNeighbors(prevdir) -> undulatoryCandidates;
        [] -> undulatoryOptions;

        ;;; Filter undulatory candidates to only include those that are actually valid moves
        for uDir in undulatoryCandidates {
            true -> found_in_all_valid; ;;; Assume it's valid until proven otherwise
            true -> current_uDir_is_valid;
            ;;; Check if uDir is in allValidOptions
            false -> found_uDir_in_allValidOptions;
            for aDir in allValidOptions {
                if uDir:0 = aDir:0 && uDir:1 = aDir:1 {
                    true -> found_uDir_in_allValidOptions;
                    break;
                }
            }
            if found_uDir_in_allValidOptions {
                uDir -> $undulatoryOptions;
            }
        }

        0.95 -> undulatoryBias; ;;; 95% chance to pick an undulatory move (straight or slight turn)
        random(99) -> randChoice;
        randChoice / 100.0 -> randFloat;

        length(undulatoryOptions) -> un_len;

        if un_len > 0 && randFloat < undulatoryBias {
            random(un_len - 1) -> i;
            undulatoryOptions:i -> dir;
        } else {
            ;;; Fallback to broader discovery logic if undulatory options failed or random chance decided
            ;;; Prioritize empty cells for discovery if encounterCount is high
            if encounterCount >= maxEncounters {
                for currentDir in allValidOptions {
                    currentDir:0 -> cdx;
                    currentDir:1 -> cdy;
                    (x + cdx + gridWidth) % gridWidth -> cnx;
                    (y + cdy + gridHeight) % gridHeight -> cny;
                    grid:cny -> crow;
                    crow:cnx -> ccell;
                    if ccell = " " {
                        currentDir -> $discoverOptions;
                    }
                }

                length(discoverOptions) -> d_len;
                if d_len > 0 {
                    random(d_len - 1) -> i;
                    discoverOptions:i -> dir;
                } else {
                    ;;; If no empty cells, just choose any valid move
                    if numValidOptions > 0 {
                        random(numValidOptions - 1) -> i;
                        allValidOptions:i -> dir;
                    }
                }
            } else { ;;; Continue with normal random movement if not forced to turn for encounter
                if numValidOptions > 0 {
                    random(numValidOptions - 1) -> i;
                    allValidOptions:i -> dir;
                }
            }
        }
    } elseif personality = "learner" {
        ;;; Adjust bias towards aggressive or discover based on lastGoalEncounter
        ;;; Lower lastGoalEncounter means more recent goal, so more aggressive
        ;;; Higher lastGoalEncounter means less recent goal, so more discover-like

        50.0 -> goalMemoryThreshold; ;;; Number of steps before learner starts exploring more
        0.5 -> aggressionBias; ;;; Default bias, 0.0 for pure discover, 1.0 for pure aggressive

        if lastGoalEncounter < goalMemoryThreshold {
            ;;; More aggressive
            aggressionBias = lastGoalEncounter / goalMemoryThreshold; ;;; Linear interpolation
            aggressionBias = 1.0 - aggressionBias; ;;; Invert so lower steps = higher bias
        } else {
            ;;; More discover-like
            aggressionBias = 0.0;
        }

        random(99) -> randChoice;
        randChoice / 100.0 -> randFloat;

        if randFloat < aggressionBias {
            ;;; Act more like an aggressive walker
            findClosestGoal(grid, pos, gridWidth, gridHeight) -> goalPos;
            goalPos:0 -> gx;
            goalPos:1 -> gy;

            if gx /= -1 { ;;; If a goal is found
                [] -> directAlignedOptions;
                [] -> distanceMinimizingOptions;

                abs(gx - x) -> rawDx;
                abs(gy - y) -> rawDy;
                min(rawDx, gridWidth - rawDx) -> shortestDx;
                min(rawDy, gridHeight - rawDy) -> shortestDy;

                0 -> desiredXDir;
                if gx > x {
                    if shortestDx = gx - x { 1 -> desiredXDir; } else { -1 -> desiredXDir; }
                } elseif gx < x {
                    if shortestDx = x - gx { -1 -> desiredXDir; } else { 1 -> desiredXDir; }
                }

                0 -> desiredYDir;
                if gy > y {
                    if shortestDy = gy - y { 1 -> desiredYDir; } else { -1 -> desiredYDir; }
                } elseif gy < y {
                    if shortestDy = y - gy { -1 -> desiredYDir; } else { 1 -> desiredYDir; }
                }

                for currentDirOption in allValidOptions {
                    currentDirOption:0 -> cdx;
                    currentDirOption:1 -> cdy;

                    true -> isAligned;
                    if desiredXDir /= 0 && cdx /= desiredXDir { false -> isAligned; }
                    if desiredYDir /= 0 && cdy /= desiredYDir { false -> isAligned; }
                    if desiredXDir = 0 && cdx /= 0 { false -> isAligned; }
                    if desiredYDir = 0 && cdy /= 0 { false -> isAligned; }

                    if isAligned {
                        currentDirOption -> $directAlignedOptions;
                    }
                }

                length(directAlignedOptions) -> dalen;
                if dalen > 0 {
                    random(dalen - 1) -> i;
                    directAlignedOptions:i -> dir;
                } else {
                    (gridWidth * gridHeight) + 1 -> minimizedNewDist;
                    for currentDir in allValidOptions {
                        currentDir:0 -> cdx;
                        currentDir:1 -> cdy;
                        (x + cdx + gridWidth) % gridWidth -> cnx;
                        (y + cdy + gridHeight) % gridHeight -> cny;

                        manhattanDistance({cnx, cny}, goalPos, gridWidth, gridHeight) -> newDist;
                        if newDist < minimizedNewDist {
                            newDist -> minimizedNewDist;
                            [] -> distanceMinimizingOptions;
                            currentDir -> $distanceMinimizingOptions;
                        } elseif newDist = minimizedNewDist {
                            currentDir -> $distanceMinimizingOptions;
                        }
                    }
                    length(distanceMinimizingOptions) -> dmlen;
                    if dmlen > 0 {
                        random(dmlen - 1) -> i;
                        distanceMinimizingOptions:i -> dir;
                    }
                }
            } else { ;;; No goal found, revert to general exploration for aggressive part
                length(allValidOptions) -> numValidOptions;
                if numValidOptions > 0 {
                    random(numValidOptions - 1) -> i;
                    allValidOptions:i -> dir;
                }
            }
        } else {
            ;;; Act more like a discover walker
            length(allValidOptions) -> numValidOptions;
            getUndulatoryNeighbors(prevdir) -> undulatoryCandidates;
            [] -> undulatoryOptions;

            for uDir in undulatoryCandidates {
                false -> found_uDir_in_allValidOptions;
                for aDir in allValidOptions {
                    if uDir:0 = aDir:0 && uDir:1 = aDir:1 {
                        true -> found_uDir_in_allValidOptions;
                        break;
                    }
                }
                if found_uDir_in_allValidOptions {
                    uDir -> $undulatoryOptions;
                }
            }

            length(undulatoryOptions) -> un_len;
            if un_len > 0 {
                random(un_len - 1) -> i;
                undulatoryOptions:i -> dir;
            } else {
                ;;; Fallback to broader discovery logic if undulatory options failed
                if encounterCount >= maxEncounters {
                    for currentDir in allValidOptions {
                        currentDir:0 -> cdx;
                        currentDir:1 -> cdy;
                        (x + cdx + gridWidth) % gridWidth -> cnx;
                        (y + cdy + gridHeight) % gridHeight -> cny;
                        grid:cny -> crow;
                        crow:cnx -> ccell;
                        if ccell = " " {
                            currentDir -> $discoverOptions;
                        }
                    }

                    length(discoverOptions) -> d_len;
                    if d_len > 0 {
                        random(d_len - 1) -> i;
                        discoverOptions:i -> dir;
                    } else {
                        if numValidOptions > 0 {
                            random(numValidOptions - 1) -> i;
                            allValidOptions:i -> dir;
                        }
                    }
                } else {
                    if numValidOptions > 0 {
                        random(numValidOptions - 1) -> i;
                        allValidOptions:i -> dir;
                    }
                }
            }
        }
    }


    ;;; If no personality-specific direction was chosen, fall back to general valid options
    ;;; This happens if personality logic didn't set a 'dir' or if allValidOptions was empty
    if length(dir) = 0 {
        length(allValidOptions) -> numValidOptions;
        if numValidOptions > 0 {
            random(numValidOptions - 1) -> i;
            allValidOptions:i -> dir;
        } else {
            ;;; Backtrack if completely stuck
            length(path) -> plen;
            if plen > 0 {
                path:(plen - 1) -> pos;
                0 -> i;
                [] -> newpath;
                while i < plen - 1 {
                    path:i -> $newpath;
                    i + 1 -> i;
                }
                newpath -> path;
                ;;; UPDATED: Pass all new attributes
                gridpos(grid, pos, true, path, mode, prevdir, lastTile, GRIDPOS:trailLength, personality, encounterCount, maxEncounters, energy, maxEnergy, age, maxAge, isAlive, walkerId, lastGoalEncounter) -> GRIDPOS;
                return;
            }
            ;;; UPDATED: Pass all new attributes, and mark as not moved (stuck)
            gridpos(grid, pos, false, path, mode, prevdir, lastTile, GRIDPOS:trailLength, personality, encounterCount, maxEncounters, energy, maxEnergy, age, maxAge, isAlive, walkerId, lastGoalEncounter) -> GRIDPOS;
            return;
        }
    }

    dir:0 -> dx;
    dir:1 -> dy;
    (x + dx + gridWidth) % gridWidth -> x; ;;; Use gridWidth for X wrap
    (y + dy + gridHeight) % gridHeight -> y; ;;; Use gridHeight for Y wrap
    {x, y} -> pos;
    pos -> $path;

    dir -> prevdir;
    ;;; UPDATED: Pass all new attributes
    gridpos(grid, pos, true, path, mode, prevdir, lastTile, GRIDPOS:trailLength, personality, encounterCount, maxEncounters, energy, maxEnergy, age, maxAge, isAlive, walkerId, lastGoalEncounter) -> GRIDPOS;
}

fn cellColor(cell) -> color {
    "\033[0m" -> color;
    if cell = "O" { "\033[1m\033[38;2;255;255;100m" -> color; } ;;; Bright white for the walker's head
    elseif cell = "#" { "\033[1m\033[38;2;0;255;0m" -> color; }
    elseif cell = "%" { "\033[1m\033[38;2;0;245;0m" -> color; }
    elseif cell = "&" { "\033[1m\033[38;2;0;235;0m" -> color; }
    elseif cell = "=" { "\033[1m\033[38;2;0;225;0m" -> color; }
    elseif cell = "~" { "\033[1m\033[38;2;0;215;0m" -> color; }
    elseif cell = "-" { "\033[1m\033[38;2;0;205;0m" -> color; }
    elseif cell = ":" { "\033[1m\033[38;2;0;195;0m" -> color; }
    elseif cell = ";" { "\033[1m\033[38;2;0;185;0m" -> color; }
    elseif cell = "," { "\033[1m\033[38;2;0;175;0m" -> color; }
    elseif cell = "." { "\033[1m\033[38;2;0;165;0m" -> color; }
    elseif cell = "`" { "\033[1m\033[38;2;0;155;0m" -> color; }
    elseif cell = "!" { "\033[1m\033[38;2;0;145;0m" -> color; }
    ;;; NEW: Colors for G, S, T
    elseif cell = "◍" { "\033[1m\033[38;2;255;0;0m" -> color; } ;;; Red for Goal/Food
    elseif cell = "S" { "\033[1m\033[38;2;100;100;255m" -> color; } ;;; Blue for Slow
    elseif cell = "T" { "\033[1m\033[38;2;255;255;0m" -> color; } ;;; Yellow for Teleport
}

;;; Lowers fade level for trail effect for all walkers
fn fadeTrail(grid, gridWidth, gridHeight) -> grid {
    0 -> y;
    while y < gridHeight { ;;; Use gridHeight
        0 -> x;
        grid:y -> row;
        [] -> newrow;
        while x < gridWidth { ;;; Use gridWidth
            row:x -> cell;

            ;;; IMPORTANT: Convert the previous frame's walker head ('O') to the start of the trail ('#')
            if cell = "O" {
                "#" -> cell;
            }
            ;;; Unified fade sequence for all trails
            elseif cell = "#" { "%" -> cell; }
            elseif cell = "%" { "&" -> cell; }
            elseif cell = "&" { "=" -> cell; }
            elseif cell = "=" { "~" -> cell; }
            elseif cell = "~" { "-" -> cell; }
            elseif cell = "-" { ":" -> cell; }
            elseif cell = ":" { ";" -> cell; }
            elseif cell = ";" { "," -> cell; }
            elseif cell = "," { "." -> cell; }
            elseif cell = "." { "`" -> cell; }
            elseif cell = "`" { "!" -> cell; }
            elseif cell = "!" { " " -> cell; } ;;; Trail completely fades

            cell -> $newrow;
            x + 1 -> x;
        }
        newrow -> grid:y;
        y + 1 -> y;
    }
    grid -> grid;
}

;;; Marks the current walker on the grid with its ID
fn markWalkerPosition(grid, pos, walkerId, mode) -> grid {
    pos:0 -> x;
    pos:1 -> y;
    grid:y -> row;
    "O" -> row:x; ;;; Always use 'O' for the active walker head
    row -> grid:y;
    grid -> grid;
}

;;; Applies G/S/T tile logic, may modify mode/pos/path, records last tile encountered
;;; UPDATED: Modified to only set lastTile if an item is consumed.
;;; UPDATED: Resets lastGoalEncounter if '◍' (Goal) is consumed.
fn applyTileEffect(GRIDPOS, gridWidth, gridHeight) -> GRIDPOS {
    GRIDPOS:pos -> pos;
    GRIDPOS:mode -> mode;
    GRIDPOS:path -> path;
    GRIDPOS:grid -> grid;
    GRIDPOS:personality -> personality;
    GRIDPOS:encounterCount -> encounterCount;
    ;;; NEW: Get energy and maxEnergy, age, maxAge, isAlive, walkerId
    GRIDPOS:energy -> energy;
    GRIDPOS:maxEnergy -> maxEnergy;
    GRIDPOS:age -> age;
    GRIDPOS:maxAge -> maxAge;
    GRIDPOS:isAlive -> isAlive;
    GRIDPOS:walkerId -> walkerId;
    GRIDPOS:lastGoalEncounter -> lastGoalEncounter; ;;; NEW: Get lastGoalEncounter

    pos:0 -> x;
    pos:1 -> y;
    grid:y -> row;
    row:x -> cell;

    ;;; Store the tile type that was just on the current cell
    "" -> tile_consumed; ;;; Variable to hold the type of tile consumed (if any)

    if cell = "◍" {
        " " -> row:x; ;;; Consume the 'G' tile, turn it into empty space
        energy + 100 -> energy; ;;; NEW: Restore energy
        if energy > maxEnergy { maxEnergy -> energy; } ;;; Cap energy at max
        "hyper" -> mode;
        "◍" -> tile_consumed; ;;; Mark 'G' as consumed
        0 -> encounterCount;
        0 -> lastGoalEncounter; ;;; NEW: Reset goal encounter count
    } elseif cell = "S" {
        " " -> row:x; ;;; Consume 'S' tile
        energy - 2 -> energy; ;;; NEW: Slight energy penalty for 'S'
        "slow" -> mode;
        "S" -> tile_consumed; ;;; Mark 'S' as consumed
        0 -> encounterCount;
    } elseif cell = "T" {
        " " -> row:x; ;;; Consume 'T' tile
        row -> grid:y; ;;; Update the grid with the consumed T before teleporting

        energy - 5 -> energy; ;;; NEW: Energy cost for teleporting

        true -> searching;
        while searching {
            random(gridWidth - 1) -> tx; ;;; Use gridWidth
            random(gridHeight - 1) -> ty; ;;; Use gridHeight
            grid:ty -> trow;
            trow:tx -> tcell;
            if tcell = " " {
                false -> searching;
                {tx, ty} -> pos;
                [pos] -> path; ;;; Reset path on teleport
            }
        }
        "T" -> tile_consumed; ;;; Mark 'T' as consumed
        0 -> encounterCount;
    }
    ;;; IMPORTANT: lastTile is NOT set here if no special tile was consumed (it remains "").
    ;;; It will be managed in the update function based on tile_consumed.

    row -> grid:y;
    ;;; CRITICAL FIX: Ensure all updated attributes are returned in the new pod
    gridpos(grid, pos, GRIDPOS:moved, path, mode, GRIDPOS:prevdir, tile_consumed, GRIDPOS:trailLength, personality, encounterCount, GRIDPOS:maxEncounters, energy, maxEnergy, age, maxAge, isAlive, walkerId, lastGoalEncounter) -> GRIDPOS;
}

;;; Calculate trail length from path
fn calculateTrailLength(path) -> lengthVal {
    length(path) -> lengthVal;
}

;;; Marks current position in grid and updates position, applies fade effect and item logic
;;; UPDATED: Incorporates energy and age mechanics, and refined lastTile/encounterCount logic
;;; UPDATED: Increments lastGoalEncounter for 'learner' personality.
fn update(GRIDPOS, gridWidth, gridHeight) -> GRIDPOS {

    ;;; Move the walker
    move(GRIDPOS, gridWidth, gridHeight) -> GRIDPOS_AfterMove;

    ;;; Apply tiling effect -- increase / decrease in enerhy, etc
    applyTileEffect(GRIDPOS_AfterMove, gridWidth, gridHeight) -> GRIDPOS_AfterMove;
    GRIDPOS_AfterMove:grid -> grid;
    GRIDPOS_AfterMove:personality -> personality;
    GRIDPOS_AfterMove:encounterCount -> encounterCount;
    GRIDPOS_AfterMove:maxEncounters -> maxEncounters;
    GRIDPOS_AfterMove:lastTile -> previousFrameLastTile; ;;; Hold the lastTile from previous frame
    GRIDPOS_AfterMove:lastGoalEncounter -> lastGoalEncounter; ;;; NEW: Get lastGoalEncounter

    ;;; Extract and update life stats
    GRIDPOS_AfterMove:energy -> energy;
    GRIDPOS_AfterMove:maxEnergy -> maxEnergy;
    GRIDPOS_AfterMove:age -> age;
    GRIDPOS_AfterMove:maxAge -> maxAge;
    GRIDPOS_AfterMove:isAlive -> isAlive;
    GRIDPOS_AfterMove:walkerId -> walkerId;

    ;;; Update stuff that can then be shown in HUD
    GRIDPOS_AfterMove:lastTile -> consumedTileType; ;;; This is "" if no item consumed, or "◍"/"S"/"T"
    "" -> lastTileForHUD;
    if consumedTileType = "◍" { "Goal" -> lastTileForHUD; } ;;; Display full name
    elseif consumedTileType = "S" { "Slow" -> lastTileForHUD; } ;;; Display full name
    elseif consumedTileType = "T" { "Teleport" -> lastTileForHUD; } ;;; Display full name
    else { GRIDPOS:lastTile -> lastTileForHUD;}

    encounterCount + 1 -> encounterCount;
    calculateTrailLength(GRIDPOS_AfterMove:path) -> trailLen;

    ;;; Energy Consumption per step (if not dead from tile effect)
    if isAlive { ;;; Only consume energy if still alive
        energy - 1 -> energy; ;;; Consume 1 energy per step
        if energy <= 0 {
            false -> isAlive; ;;; Walker dies if energy runs out
        }
        energy -> GRIDPOS_AfterMove:energy;
        isAlive -> GRIDPOS_AfterMove:isAlive;
    }

    ;;; Age Increment
    if isAlive { ;;; Only age if still alive
        age + 1 -> age; ;;; Increment age
        if age >= maxAge {
            false -> isAlive; ;;; Walker dies of old age
        }
        age -> GRIDPOS_AfterMove:age;
        isAlive -> GRIDPOS_AfterMove:isAlive;
    }

    ;;; Increment lastGoalEncounter if the walker is a learner and did not consume a goal
    if personality = "learner" && consumedTileType /= "◍" {
        lastGoalEncounter + 1 -> lastGoalEncounter;
    }
    lastGoalEncounter -> GRIDPOS_AfterMove:lastGoalEncounter;


    ;;; If walker died this step, no further movement or path updates
    if isAlive = false {
        ;;; Return the pod with isAlive=false, no path or pos change, but with updated grid reference.
        gridpos(grid, GRIDPOS_AfterMove:pos,
                false, GRIDPOS_AfterMove:path,
                 GRIDPOS_AfterMove:mode, GRIDPOS_AfterMove:prevdir,
                 "None", GRIDPOS_AfterMove:trailLength, personality,
                 encounterCount, maxEncounters, energy, maxEnergy, age, maxAge, isAlive, walkerId, lastGoalEncounter) -> GRIDPOS;
        return;
    }


    GRIDPOS_AfterMove:grid -> grid;
    GRIDPOS_AfterMove:pos -> pos;
    GRIDPOS_AfterMove:moved -> moved;
    GRIDPOS_AfterMove:path -> path;
    GRIDPOS_AfterMove:mode -> mode;
    GRIDPOS_AfterMove:prevdir -> prevdir;
    GRIDPOS_AfterMove:personality -> personality;
    GRIDPOS_AfterMove:maxEncounters -> maxEncounters;
    GRIDPOS_AfterMove:energy -> energy;
    GRIDPOS_AfterMove:maxEnergy -> maxEnergy;
    GRIDPOS_AfterMove:age -> age;
    GRIDPOS_AfterMove:maxAge -> maxAge;
    GRIDPOS_AfterMove:isAlive -> isAlive;
    GRIDPOS_AfterMove:walkerId -> walkerId;
    markWalkerPosition(grid, GRIDPOS_AfterMove:pos, GRIDPOS_AfterMove:walkerId, GRIDPOS_AfterMove:mode) -> grid; ;;; Mark with 'O'
    gridpos(grid, pos, moved, path, mode, prevdir, lastTileForHUD, trailLen, personality, encounterCount, maxEncounters, energy, maxEnergy, age, maxAge, isAlive, walkerId, lastGoalEncounter) -> GRIDPOS;
}

;;; Pads string on the right with spaces to a fixed length
fn padRight(str, length) -> padded {
    str -> padded;
    while length > length(padded) {
        padded + " " -> padded;
    }
    padded -> padded;
}

;;; Formats position array as "(xx, yy)" with fixed width
fn formatPos(pos) -> formatted {
    pos:0 -> x;
    pos:1 -> y;

    "" + x -> sx;
    "" + y -> sy;
    while length(sx) < 3 {
        " " + sx -> sx;
    }
    while length(sy) < 3 {
        " " + sy -> sy;
    }

    "(" + sx + ", " + sy + ")" -> formatted;
    while length(formatted) < 10 {
        " " + formatted -> formatted;
     }
}

;;; Converts tile code to full name for display
;;; CRITICAL FIX: Renamed this to be consistent with the logic in update
fn tileName(tile) -> name {
    "None" -> name;
    if tile = "◍" { "Goal" -> name; }
    elseif tile = "S" { "Slow" -> name; }
    elseif tile = "T" { "Teleport" -> name; }
    else { "None" -> name; }
}

;;; Prints a neat overlay with info for all walkers
;;; UPDATED: Added Energy, Age, and Walker ID to display
;;; UPDATED: Added Last Goal Encounter to display
fn printOverlay(numWalkers, walkers, steps) {
    pr "\033[34m";
    prn "┌─────────────┬─────────────┬───────────┬───────────────┬───────────────┬─────────────┬─────────────────┬─────────┬─────────┬───────────────┐";
    prn "│   WALKER    │ Mode        │ Pos       │ Trail Length  │ Last Tile     │ Personality │ Encounter Count │ Energy  │ Age     │ Last Goal Enc.│";
    prn "├─────────────┼─────────────┼───────────┼───────────────┼───────────────┼─────────────┼─────────────────┼─────────┼─────────┼───────────────┤";

    0 -> i;
    while i < length(walkers) {
        walkers:i -> currentWalker;
        "" + currentWalker:walkerId -> walkerNum; ;;; Use actual walkerId
        "" + currentWalker:energy + "/" + currentWalker:maxEnergy -> energyStr;
        "" + currentWalker:age + "/" + currentWalker:maxAge -> ageStr;
        prn "│ Walker " + padRight(walkerNum, 5) + "│ " + padRight(currentWalker:mode, 12) + "│ " + formatPos(currentWalker:pos) + "│ " + padRight("" + currentWalker:trailLength, 14) + "│ " + padRight(currentWalker:lastTile, 14) + "│ " + padRight(currentWalker:personality, 12) + "│ " + padRight("" + currentWalker:encounterCount, 16) + "│ " + padRight(energyStr, 8) + "│ " + padRight(ageStr, 8) + "│ " + padRight("" + currentWalker:lastGoalEncounter, 14) + "│";
        i + 1 -> i;
    }
    while i < numWalkers  {
        prn "│ DEAD        │             │           │               │               │             │                 │         │         │               │";
        i + 1 -> i;
    }

    prn "└─────────────┴─────────────┴───────────┴───────────────┴───────────────┴─────────────┴─────────────────┴─────────┴─────────┴───────────────┘";
    prn " Steps: " + steps + " | Alive Walkers: " + length(walkers); ;;; Show alive count
    pr "\033[0m";
}

;;; Main program loop with N walkers
start {
    arg(0) -> gridWidth;
    arg(1) -> gridHeight;
    arg(2) -> numWalkers;

    initialize(gridWidth, gridHeight) -> grid;
    placeItems(grid, gridWidth, gridHeight) -> grid;

    [] -> walkers; ;;; List to hold all walker pods

    0 -> i;
    while i < numWalkers {
        random(gridWidth - 1) -> randX;
        random(gridHeight - 1) -> randY;
        {randX, randY} -> currentPos;
        [currentPos] -> currentPath;

        ;;; Assign personality (alternating for simplicity)
        "" -> currentPersonality;
        if i % 3 = 0 { ;;; Now distribute among 3 personalities
            "learner" -> currentPersonality;
        } elseif i % 3 = 1 {
            "discover" -> currentPersonality;
        } else {
            "learner" -> currentPersonality;
        }

        ;;; NEW: Initial Energy and Age
        200 -> initialMaxEnergy;
        initialMaxEnergy -> initialEnergy;
        5000 -> initialMaxAge; ;;; Walkers live for 500 steps (unless they starve)
        0 -> initialAge;
        true -> initialIsAlive;
        i + 1 -> currentWalkerId; ;;; Simple ID for display
        0 -> initialLastGoalEncounter; ;;; NEW: Initialize lastGoalEncounter

        ;;; Create a new walker pod and add to the list
        ;;; UPDATED: Added energy, maxEnergy, age, maxAge, isAlive, walkerId, lastGoalEncounter
        gridpos(grid, currentPos,
            true, currentPath, 
            "normal", {0, 0},
            "None", 1, currentPersonality, 
            0, 5, initialEnergy, initialMaxEnergy,
            initialAge, initialMaxAge,
            initialIsAlive, currentWalkerId, initialLastGoalEncounter) -> newWalkerPod;
        newWalkerPod -> $walkers;

        i + 1 -> i;
    }

    0 -> steps;
    while true {
        steps + 1 -> steps;

        ;;; Call fadeTrail *first* to process the previous frame's 'O's into '#'
        fadeTrail(grid, gridWidth, gridHeight) -> grid;
        [] -> livingWalkersThisFrame; ;;; Filter out dead walkers

        ;;; Iterate through all walkers and update them
        0 -> i;
        while i < length(walkers) {
            walkers:i -> currentWalkerPod;

            ;;; Only process living walkers
            if currentWalkerPod:isAlive {
                ;;; CRITICAL FIX: Ensure the current global grid is passed into the walker's pod
                ;;; before calling update, so applyTileEffect acts on the latest grid.
                gridpos(grid, currentWalkerPod:pos,
                        currentWalkerPod:moved, currentWalkerPod:path,
                        currentWalkerPod:mode, currentWalkerPod:prevdir,
                        currentWalkerPod:lastTile, currentWalkerPod:trailLength,
                        currentWalkerPod:personality, currentWalkerPod:encounterCount,
                        currentWalkerPod:maxEncounters, currentWalkerPod:energy,
                        currentWalkerPod:maxEnergy, currentWalkerPod:age,
                        currentWalkerPod:maxAge, currentWalkerPod:isAlive,
                        currentWalkerPod:walkerId, currentWalkerPod:lastGoalEncounter) -> currentWalkerPodForUpdate;
                update(currentWalkerPodForUpdate, gridWidth, gridHeight) -> updatedWalkerPod;

                if updatedWalkerPod:isAlive {
                    updatedWalkerPod -> $livingWalkersThisFrame; ;;; Add to the list of living walkers
                    ;;; CRITICAL FIX: Propagate the grid changes from THIS walker back to the main grid
                    updatedWalkerPod:grid -> grid;
                } else {
                    ;;; Walker died, clear its position from the grid
                    updatedWalkerPod:pos -> position;
                    position:0 -> dx;
                    position:1 -> dy;
                    grid:dy -> row_to_clear;
                    " " -> row_to_clear:dx;
                    row_to_clear -> grid:dy;
                }
            }

            i + 1 -> i;
        }
        livingWalkersThisFrame -> walkers; ;;; Update the main walkers list to only include those still alive

        ;;; If no walkers are left, the simulation ends
        if length(walkers) = 0 {
            prn "All walkers have perished!";
            return;
        }

        ;;; After all *living* walkers have moved and updated their positions, mark their *new* positions
        if steps % 10 = 0 {
            respawnItems(grid, gridWidth, gridHeight) -> grid;
        }

        ;;; Adjust ANSI escape sequence for clear screen to accommodate grid borders and HUD
        ;;; Grid height is gridHeight + 2 (for top/bottom borders)
        ;;; HUD height: 3 header rows + N walker rows + 2 footer rows + 2 blank lines (adjustable)
        10 -> baseUiLength; ;;; Header + static footer lines (adjust if overlay changes)
        length(walkers) -> walkerLines;
        baseUiLength + (walkerLines * 1) + 2 -> uiLength; ;;; Each walker adds 1 line, plus 2 for top/bottom HUD borders

        ansi_up gridHeight + 2 + uiLength; ;;; Total lines to clear: grid height + UI height
        print(grid, gridWidth); ;;; Pass gridWidth to the print function for horizontal border
        printOverlay(numWalkers, walkers, steps); ;;; Pass the entire list of walkers
    }
}
