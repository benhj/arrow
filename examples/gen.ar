;;; Word-play. Generates random text from some input text

fn word_length(w) -> len {
    0 -> len;
    for c in w {
        len + 1 -> len;
    }

}

fn to_lower(word) -> word {

    if(word = "I") {
        return;
    }

    "ABCDEFGHIJKLMNOPQRSTUVWXYZ" -> str;
    "abcdefghijklmnopqrstuvwxyz" -> lower;
    0 -> i;
    for c in str {
        word:0 -> wordc;
        if(wordc = c) {
            lower:i -> loweri;
            loweri -> word:0;
        }
        i + 1 -> i;
    }
}

fn remove_speech_mark(word) -> w {
    "" -> w;
    for c in word {
        if((c /= '"') && 
           (c /= ',') && 
           (c /= '?') &&
           (c /= '-') &&
           (c /= ')') &&
           (c /= ':') &&
           (c /= ';')) {
            w + c -> w;
        }
    }
}

fn ends_in_punc(word) -> yes {
    false -> yes;
    ' ' -> d;
    for c in word {
        c -> d;
    }
    if((d = '.') ||
       (d = '?') ||
       (d = ',') ||
       (d = '-')) {
        true -> yes;
    }
}

fn build_representation(L) -> map {
    "" -> a;
    "" -> b;
    "" -> c;
    0 -> i;
    [] -> map:"hello world";
    for a,b,c in L {
        remove_speech_mark(trim(a)) -> a;
        remove_speech_mark(trim(b)) -> b;
        if((a /= "") && (b /= "")) {
            remove_speech_mark(trim(c)) -> c;
            a + " " + b -> key;
            map_contains(map, key) -> match;
            if(match = false) {
                [^c] -> map:key;
            } else {
                map:key -> orig;
                c -> $orig;
                orig -> map:key;
            }
        }
        prn i;
        i + 1 -> i;
        if(i = 20000) {
            return;
        }
    }
}

fn next_words(representation, word1, word2) -> next {

    [] -> next;

    if(word1 = "") {
        "you" -> word1;
    }

    word1 + " " + word2 -> key;
    map_contains(representation, key) -> res;
    if(res) {
        representation:key -> next;
    }
}

fn generate_seed_from_input(L) -> seeds {
    [] -> seeds;
    [] -> a;
    [] -> b;
    [] -> ex;
    [] -> fin;
    if(L matches [??a you ??b] ||
       L matches [??a You ??b]) {
        "I" -> $seeds;
        if(a matches [== are] ||
           a matches [== Are] ||
           a matches [== are ==] ||
           a matches [== Are ==]) {
            "am" -> $seeds;
        } else {
            if (b matches [are ==] ||
                b matches [are]) {
                "am" -> $seeds;
            } elseif (b matches[know ??ex]) {
                if(ex matches [me] ||
                   ex matches [== me]) {
                    [You are] -> seeds;
                } elseif (ex matches [??fin]) {
                    [^^fin] -> seeds;
                }
            } else {
                b:0 -> $seeds;
            }
        }
        return;
    }
    if(L matches [== you] ||
       L matches [== You]) {
        "I" -> $seeds;
        return;
    }
    if(L matches [??a I ??b]) {
        "You" -> $seeds;
        if(a matches [== am] ||
           a matches [== Am]) {
            "are" -> $seeds;
        } else {
            if(b matches [am ==]) {
                "are" -> $seeds;
            } else {
                if (b /= []) {
                    b:0 -> $seeds;
                }
            }
        }
        return;
    }
    if(L matches [== The ?a ==] ||
       L matches [== the ?a ==]) {
        [The ^a] -> seeds;    
        return;
    }

    if(L matches [== what] ||
       L matches [== What]) {
        "What" -> $seeds;
        return;
    }
    if(L matches [== what ?a ==] ||
       L matches [== What ?a ==]) {
        [What ^a] -> seeds;
        return;
    }
    if(L matches [== who is ?a] ||
        L matches [== Who is ?a]) {
        a -> $seeds;
    }
    if(L matches [== why ==] ||
        L matches [== Why ==]) {
        "because" -> $seeds;
    }
    if(L matches [== is the ?a]) {
        [^^seeds ^a] -> seeds;
        return;
    }
    if(L matches [== is it]) {
        [^^seeds it is] -> seeds;
        return;
    }
    if(seeds = []) {
        L:1 -> $seeds;
    }
}

fn string_to_list(str) -> words {
    "" -> builder;
    [[]] -> words;
    for i in str {
        if(i = ' ') {
            to_lower(remove_speech_mark(trim(builder))) -> $words;
            "" -> builder;
        } else {
            i -> $builder;
        }
    }
    to_lower(remove_speech_mark(builder)) -> $words;
}

start {
    file_read_lines("/Users/bjones/hobbit.txt", ' ') -> L;
    build_representation(L) -> representation;

    ;;; continue to query the user for new input
    while(true) {
        input(">> ") -> in;
        string_to_list(in) -> list;

        ;;; Generate seed words based on input.
        ;;; These seeds words will be used for
        ;;; subsequent markov word generation
        generate_seed_from_input(list) -> seeds;

        "" -> seed;
        "" -> seed2;
        for s in seeds {
            pr s;
            pr " ";
            s -> seed2;
        }

        ;;; when the word 'the' is encountered, the
        ;;; sentence generation stops after following word.
        ;;; This boolean is used to control that.
        false -> the;

        ;;; A variable for storing the next word to be printed
        seed2 -> chosen;

        ;;; Stop generating sentence when a given
        ;;; word ends in puctuation (see function)
        while(ends_in_punc(chosen) = false) {
            next_words(representation, seed, seed2) -> candidates;
            if(candidates /= []) {
                random(candidates) -> chosen;
                remove_speech_mark(chosen) -> chosen;

                ;;; Don't continue with and parts.
                ;;; Be concise.
                if(chosen = "and") {
                    break;
                }

                ;;; break if the preceding word was 'the'
                if(the = false) {
                    pr chosen + " ";
                } else {
                    pr chosen + " ";
                    ;;;break;
                }

                ;;; For controlling when to break after the
                ;;; word 'the'.
                if(chosen = "the") {
                    true -> the;
                } else {
                    false -> the;
                }
            } else {
                pr "...";
                break;
            }
            seed2 -> seed;
            chosen -> seed2;
        }
        prn " ";
    }
}