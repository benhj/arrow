;;; Word-play. Generates random text from some input text

;;; checks if a word starts with an uppercase letter
fn starts_upper(word) -> res {
    false -> res;
    "ABCDEFGHIJKLMNOPQRSTUVWXYZ" -> upper;
    word:0 -> c;
    for i in upper {
        if(c = i) {
            true -> res;
            return;
        }
    }
}

fn ends_in_dot(word) -> yes {
    false -> yes;
    ' ' -> d;
    for c in word {
        c -> d;
    }
    if(d = '.') {
        true -> yes;
    }
}

;;; converts an array of lines to a list of words
fn to_words(lines) -> L {
    [] -> L;
    repeat 200 times {
        random(lines) -> line;
        tokenize(line, ' ') -> toks;
        for t in toks {
            [^^L ^t] -> L;
        }
    }
}

fn contains(big, word) -> res {
    big matches [== [^word ==] ==] -> res;
}

fn insert(big, word) -> big {
    [^^big [^word []]] -> big;
}

fn build(big, word, previous) -> big {
    [] -> finish;
    if(big matches [??start [^previous ?L] ??finish]) {
        [^previous [^^L ^word]] -> inner;
        [^^start ^inner ^^finish] -> big;
    }
}

;;; creates a list of all uppercase-starting words
fn build_upper(big) -> upper {
    [] -> upper;
    for b in big {
        if(b matches [?word ==]) {
            if(starts_upper(word)) {
                [^^upper ^word] -> upper;
            }
        }
    }
}

start {
    "/Users/bjones/fort.txt" -> dat;
    file_read_lines(dat) -> lines;
    to_words(lines) -> L;

    [] -> big;
    "the" -> prev;
    insert(big, prev) -> big;
    for w in L {
        if(w /= "") {
            if(contains(big, w) = false) {
                insert(big, w) -> big;
            }
        }
    }

    ;;; Build a list of words that begin
    ;;; with an uppercase letter.
    build_upper(big) -> upper;

    for w in L {
        if(w /= "") {
            if(contains(big, w)) {
                build(big, w, prev) -> big;
                w -> prev;
            }
        }
    }

    ;;; Start with a random uppercase word
    random(upper) -> u;
    "" -> following;
    if(big matches [== [^u ?L] ==]) {
        pr u + " ";
        random(L) -> following;
        pr following + " ";
    }

    ;;; Continues to build the sentence until
    ;;; a word ends in a full-stop
    while(true) {
        if(big matches [== [^following ?L] ==]) {
            random(L) -> following;
            if(following /= " ") {
                pr following + " ";
                if(ends_in_dot(following)) {
                    break;
                }
            }
        }
    }
    prn "";
}