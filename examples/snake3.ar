;;; Initializes a sizeÃ—size grid filled with spaces (' ')
fn initialize(size) -> grid {
    0 -> y;
    [] -> grid;
    while y < size {
        0 -> x;
        [] -> row;
        while x < size {
            ' ' -> $row;
            x + 1 -> x;
        }
        row -> $grid;
        y + 1 -> y;
    }
}

;;; Randomly places goal, slow, and teleport tiles
fn placeItems(grid, size) -> grid {
    0 -> i;
    while i < 5 {
        random(size - 1) -> x;
        random(size - 1) -> y;
        grid:y -> row;
        row:x -> cell;
        if cell = ' ' {
            'G' -> row:x;
            row -> grid:y;
            i + 1 -> i;
        }
    }
    0 -> i;
    while i < 3 {
        random(size - 1) -> x;
        random(size - 1) -> y;
        grid:y -> row;
        row:x -> cell;
        if cell = ' ' {
            'S' -> row:x;
            row -> grid:y;
            i + 1 -> i;
        }
    }
    0 -> i;
    while i < 2 {
        random(size - 1) -> x;
        random(size - 1) -> y;
        grid:y -> row;
        row:x -> cell;
        if cell = ' ' {
            'T' -> row:x;
            row -> grid:y;
            i + 1 -> i;
        }
    }
    grid -> grid;
}

;;; Prints the grid row by row
fn print(grid) {
    for row in grid {
        prn row;
    }
}

;;; GRIDPOS holds the grid, current position, movement status, path, and mode
pod gridpos(grid, pos, moved, path, mode);

;;; Lowers fade level for trail effect
fn fadeTrail(grid, size) -> grid {
    0 -> y;
    while y < size {
        0 -> x;
        grid:y -> row;
        [] -> newrow;
        while x < size {
            row:x -> cell;
            if cell = '@' {
                '#' -> cell;
            } elseif cell = '#' {
                '%' -> cell;
            } elseif cell = '%' {
                '&' -> cell;
            } elseif cell = '&' {
                '=' -> cell;
            } elseif cell = '=' {
                '+' -> cell;
            } elseif cell = '+' {
                '~' -> cell;
            } elseif cell = '~' {
                '-' -> cell;
            } elseif cell = '-' {
                ':' -> cell;
            } elseif cell = ':' {
                ';' -> cell;
            } elseif cell = ';' {
                ',' -> cell;
            } elseif cell = ',' {
                '.' -> cell;
            } elseif cell = '.' {
                '`' -> cell;
            } elseif cell = '`' {
                '!' -> cell;
            } elseif cell = '!' {
                ' ' -> cell;
            }
            cell -> $newrow;
            x + 1 -> x;
        }
        newrow -> grid:y;
        y + 1 -> y;
    }
    grid -> grid;
}

;;; Moves position by one unit in a random unvisited direction, with backtracking
fn move(GRIDPOS, size) -> GRIDPOS {
    GRIDPOS:pos -> pos;
    GRIDPOS:grid -> grid;
    GRIDPOS:path -> path;
    GRIDPOS:mode -> mode;

    pos:0 -> x;
    pos:1 -> y;

    [] -> unexploredOptions;
    [] -> otherOptions;

    ;;; Right
    ((x + 1) % size) -> x1;
    grid:y -> row;
    row:x1 -> cell;
    if cell = ' ' || cell = 'G' || cell = 'S' || cell = 'T' { {1, 0} -> $unexploredOptions; }

    ;;; Left
    ((x - 1 + size) % size) -> x2;
    grid:y -> row;
    row:x2 -> cell;
    if cell = ' ' || cell = 'G' || cell = 'S' || cell = 'T' { {-1, 0} -> $unexploredOptions; }

    ;;; Down
    ((y + 1) % size) -> y1;
    grid:y1 -> row;
    row:x -> cell;
    if cell = ' ' || cell = 'G' || cell = 'S' || cell = 'T' { {0, 1} -> $unexploredOptions; }

    ;;; Up
    ((y - 1 + size) % size) -> y2;
    grid:y2 -> row;
    row:x -> cell;
    if cell = ' ' || cell = 'G' || cell = 'S' || cell = 'T' { {0, -1} -> $unexploredOptions; }

    [] -> dir;
    length(unexploredOptions) -> unexploredLength;


    if unexploredLength > 0 {
        random(unexploredLength - 1) -> i;
        unexploredOptions:i -> dir;
    } else {
        length(path) -> plen;
        if plen > 0 {
            path:(plen - 1) -> pos;
            0 -> i;
            [] -> newpath;
            while i < plen - 1 {
                path:i -> $newpath;
                i + 1 -> i;
            }
            newpath -> path;
            gridpos(grid, pos, true, path, mode) -> GRIDPOS;
            return;
        }
        gridpos(grid, pos, false, path, mode) -> GRIDPOS;
        return;
    }

    dir:0 -> dx;
    dir:1 -> dy;

    (x + dx + size) % size -> x;
    (y + dy + size) % size -> y;
    {x, y} -> pos;
    pos -> $path;
    gridpos(grid, pos, true, path, mode) -> GRIDPOS;
}

;;; Marks current position in grid and updates position, applies fade effect and item logic
fn update(GRIDPOS, size) -> GRIDPOS {
    GRIDPOS:pos -> pos;
    GRIDPOS:grid -> grid;
    GRIDPOS:moved -> moved;
    GRIDPOS:path -> path;
    GRIDPOS:mode -> mode;

    fadeTrail(grid, size) -> grid;

    0 -> y;
    while y < size {
        0 -> x;
        grid:y -> row;
        [] -> newrow;
        while x < size {
            row:x -> cell;
            if cell = '*' {
                '@' -> cell;
            }
            cell -> $newrow;
            x + 1 -> x;
        }
        newrow -> grid:y;
        y + 1 -> y;
    }

    pos:0 -> x;
    pos:1 -> y;
    grid:y -> row;
    row:x -> cell;

    if cell = 'G' {
        ' ' -> row:x;        ;;; consume
        "hyper" -> mode;
    } elseif cell = 'S' {
        ' ' -> row:x;        ;;; consume
        "slow" -> mode;
    } elseif cell = 'T' {
        ' ' -> row:x;        ;;; consume
        row -> grid:y;

        random(size) -> tx;
        random(size) -> ty;
        {tx, ty} -> pos;
        [pos] -> path;
    }
    row -> grid:y;

    ;;; mark current position according to mode
    if mode = "hyper" {
        '@' -> row:x;
    } elseif mode = "slow" {
        '.' -> row:x;
    } else {
        '*' -> row:x;
    }
    row -> grid:y;

    gridpos(grid, pos, true, path, mode) -> GRIDPOS;
    move(GRIDPOS, size) -> GRIDPOS;
}

;;; Main program loop
start {
    arg(0) -> size;
    initialize(size) -> grid;
    placeItems(grid, size) -> grid;

    {size / 2, size / 2} -> pos;
    [pos] -> path;
    gridpos(grid, pos, true, path, "normal") -> GRIDPOS;

    while true {
        update(GRIDPOS, size) -> GRIDPOS;
        ansi_up size;
        print(GRIDPOS:grid);
    }
}
