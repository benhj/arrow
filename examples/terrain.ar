;;; Disclaimer -- I used gemini to generate this example
;;; Procedural Terrain Generation Model
;;; Using a simplified Perlin-noise-like approach with linear interpolation.
;;; The 'gradients' are just random values associated with grid points.

;;; --- Utility Functions (from forest fire model, adapted) ---

fn abs(n) -> result {
    n -> result;
    if n < 0 {
        0 - n -> result;
    }
}

fn min(a, b) -> result {
    b -> result;
    if a < b {
        a -> result;
    }
}

fn max(a, b) -> result {
    a -> result;
    if b > a {
        b -> result;
    }
}

fn repeat(char, count) -> result {
    "" -> result;
    0 -> i;
    while i < count {
        result + char -> result;
        i + 1 -> i;
    }
    result -> result;
}

;;; --- Noise Generation Functions ---

;;; Initializes a grid of 'gradient' values (random numbers)
;;; We'll use these to simulate gradients for our simplified noise.
;;; Each point (x, y) in the noise grid will have a random value.
fn initialize_noise_grid(gridWidth, gridHeight) -> noise_grid {
    0 -> y;
    [] -> noise_grid;
    while y < gridHeight {
        0 -> x;
        [] -> row;
        while x < gridWidth {
            ;;; Store a random float between -1.0 and 1.0
            (random(2000) / 1000.0) - 1.0 -> r;
            r -> $row;
            x + 1 -> x;
        }
        row -> $noise_grid;
        y + 1 -> y;
    }
    noise_grid -> noise_grid;
}

;;; Linear interpolation (Lerp)
fn lerp(a, b, t) -> result {
    a + (b - a) * t -> result;
}

;;; Smootherstep function (6t^5 - 15t^4 + 10t^3) for smoother interpolation
;;; This function takes a 't' value (0 to 1) and returns a smoothed 't' value.
;;; Note: This requires floating point arithmetic, which your language supports.
fn smootherstep(t) -> result {
    t * t * t * (t * (t * 6.0 - 15.0) + 10.0) -> result;
}

;;; Gets a noise value at a given (x, y) coordinate
;;; This is the core of our simplified Perlin noise.
;;; It interpolates values from the surrounding 'gradient' points.
;;; scale_factor controls the "zoom" of the noise.
fn get_noise_value(noise_grid, x, y, gridWidth, gridHeight, scale_factor) -> value {
    ;;; Convert grid coordinates to noise grid coordinates
    x / scale_factor -> scaled_x;
    y / scale_factor -> scaled_y;

    ;;; Determine the corners of the cell in the noise grid
    min(max(0, floor(scaled_x)), gridWidth - 1) -> x0;
    min(max(0, floor(scaled_x + 1.0)), gridWidth - 1) -> x1;
    min(max(0, floor(scaled_y)), gridHeight - 1) -> y0;
    min(max(0, floor(scaled_y + 1.0)), gridHeight - 1) -> y1;

    ;;; Fractional part within the cell
    scaled_x - x0 -> fx;
    scaled_y - y0 -> fy;

    ;;; Smooth the fractional parts
    smootherstep(fx) -> u;
    smootherstep(fy) -> v;

    ;;; Get gradient values from the noise grid (using modulo for wrapping, like your forest fire)
    noise_grid:((y0 + gridHeight) % gridHeight) -> row_y0;
    noise_grid:((y1 + gridHeight) % gridHeight) -> row_y1;

    row_y0:((x0 + gridWidth) % gridWidth) -> n00;
    row_y0:((x1 + gridWidth) % gridWidth) -> n10;
    row_y1:((x0 + gridWidth) % gridWidth) -> n01;
    row_y1:((x1 + gridWidth) % gridWidth) -> n11;

    ;;; Interpolate horizontally
    lerp(n00, n10, u) -> ix0;
    lerp(n01, n11, u) -> ix1;

    ;;; Interpolate vertically
    lerp(ix0, ix1, v) -> value;
    value -> value;
}

;;; A simplified floor function (integer part)
fn floor(n) -> result {
    to_int(n) -> result;
}


;;; --- Terrain Grid Functions ---

;;; Generates the terrain grid based on noise values
fn generate_terrain(gridWidth, gridHeight, noise_grid, scale_factor, P_water, P_sand, P_grass, P_forest) -> terrain_grid {
    0 -> y;
    [] -> terrain_grid;
    while y < gridHeight {
        0 -> x;
        [] -> row;
        while x < gridWidth {
            get_noise_value(noise_grid, x, y, gridWidth, gridHeight, scale_factor) -> height;

            ;;; Map noise value to terrain type
            ;;; Normalize height from [-1, 1] to [0, 1]
            (height + 1.0) / 2.0 -> normalized_height;

            "" -> cell_char;
            if normalized_height < P_water {
                "W" -> cell_char; ;;; Water
            } elseif normalized_height < P_sand {
                "S" -> cell_char; ;;; Sand
            } elseif normalized_height < P_grass {
                "G" -> cell_char; ;;; Grassland
            } elseif normalized_height < P_forest {
                "F" -> cell_char; ;;; Forest
            } else {
                "M" -> cell_char; ;;; Mountain
            }
            cell_char -> $row;
            x + 1 -> x;
        }
        row -> $terrain_grid;
        y + 1 -> y;
    }
    terrain_grid -> terrain_grid;
}

;;; Gets ANSI 256-color background code with a black foreground for visibility
fn cellColorCode(char) -> color_code {
    "\033[48;5;232m" -> color_code; ;;; Default: Dark Grey Background (shouldn't be seen)
    "\033[38;5;232m" -> fg_code; ;;; Default: Black Foreground

    if char = "W" {
        "\033[48;5;27m" -> color_code; ;;; Deep Blue for Water
    } elseif char = "S" {
        "\033[48;5;222m" -> color_code; ;;; Sandy Yellow for Sand
    } elseif char = "G" {
        "\033[48;5;70m" -> color_code; ;;; Bright Green for Grass
    } elseif char = "F" {
        "\033[48;5;22m" -> color_code; ;;; Dark Green for Forest
    } elseif char = "M" {
        "\033[48;5;246m" -> color_code; ;;; Grey for Mountains
    }
    color_code + fg_code -> color_code; ;;; Combine BG and FG
    color_code -> color_code;
}

;;; Prints the terrain grid row by row with a box border, optimized for 256-colors
fn print_terrain(grid, gridWidth) {
    ;;; Top border
    prn "┌" + repeat("─", gridWidth * 2) + "┐";

    ;;; Grid rows with side borders
    for row in grid {
        "" -> row_str;
        for char in row {
            cellColorCode(char) -> current_color_code;
            row_str + current_color_code -> row_str;
            row_str + char + " " -> row_str; ;;; Character + one space
        }
        row_str + "\033[0m" -> row_str; ;;; Reset color at the end of each row
        prn "│" + row_str + "│";
    }

    ;;; Bottom border
    prn "└" + repeat("─", gridWidth * 2) + "┘";
}

;;; Counts terrain types
fn count_terrain_types(grid) -> counts {
    0 -> water;
    0 -> sand;
    0 -> grass;
    0 -> forest;
    0 -> mountain;
    for row in grid {
        for char in row {
            if char = "W" { water + 1 -> water; }
            elseif char = "S" { sand + 1 -> sand; }
            elseif char = "G" { grass + 1 -> grass; }
            elseif char = "F" { forest + 1 -> forest; }
            elseif char = "M" { mountain + 1 -> mountain; }
        }
    }
    {water, sand, grass, forest, mountain} -> counts;
}

;;; Prints a neat overlay with terrain stats
fn print_overlay(counts, iteration) {
    pr "\033[34m"; ;;; Blue foreground for HUD
    prn "┌───────────────────┬───────────────┐";
    prn "│       STAT        │      VALUE    │";
    prn "├───────────────────┼───────────────┤";
    prn "│ Iteration         │ " + padRight("" + iteration, 13) + " │";
    prn "│ Water (W)         │ " + padRight("" + counts:0, 13) + " │";
    prn "│ Sand (S)          │ " + padRight("" + counts:1, 13) + " │";
    prn "│ Grass (G)         │ " + padRight("" + counts:2, 13) + " │";
    prn "│ Forest (F)        │ " + padRight("" + counts:3, 13) + " │";
    prn "│ Mountain (M)      │ " + padRight("" + counts:4, 13) + " │";
    prn "└───────────────────┴───────────────┘";
    pr "\033[0m"; ;;; Reset color
}

;;; Pads string on the right with spaces to a fixed length
fn padRight(str, length) -> padded {
    str -> padded;
    while length > length(padded) {
        padded + " " -> padded;
    }
    padded -> padded;
}

;;; Main program loop
start {
    arg(0) -> gridWidth;
    arg(1) -> gridHeight;

    ;;; Default parameters for terrain generation
    ;;; These thresholds define where one terrain type ends and another begins
    ;;; They are applied to the normalized noise value (0.0 to 1.0)
    0.3 -> P_water;    ;;; Anything below this is water
    0.4 -> P_sand;     ;;; Anything between P_water and this is sand
    0.6 -> P_grass;    ;;; Anything between P_sand and this is grass
    0.8 -> P_forest;   ;;; Anything between P_grass and this is forest
    ;;; Above P_forest is mountain

    ;;; Scale factor for noise (controls "zoom" or feature size)
    ;;; Smaller values mean larger, smoother features. Larger values mean more chaotic.
    10.0 -> noise_scale;

    ;;; Initialize the underlying noise grid (bigger than the display grid for wrapping)
    ;;; The noise grid should be slightly larger to avoid issues with modulo on edges,
    ;;; or we can just use the exact gridWidth/Height for simplicity if wrapping is fine.
    ;;; For simplicity, let's make the noise grid slightly larger than display grid.
    gridWidth + 1 -> noise_grid_width;
    gridHeight + 1 -> noise_grid_height;
    initialize_noise_grid(noise_grid_width, noise_grid_height) -> base_noise_grid;

    0 -> iteration;

    ;;; In a true simulation, you might want to re-generate the noise
    ;;; or modify the terrain over time. For this example, we'll
    ;;; generate once and display, but the loop framework is there.
    while true {
        iteration + 1 -> iteration;

        ;;; Generate the terrain based on the static noise grid and parameters
        generate_terrain(gridWidth, gridHeight, base_noise_grid, noise_scale, P_water, P_sand, P_grass, P_forest) -> current_terrain_grid;

        count_terrain_types(current_terrain_grid) -> terrain_counts;

        ;;; Adjust ANSI escape sequence for clear screen
        gridHeight + 10 + 2 -> total_display_lines; ;;; +10 for borders and overlay

        ;;; Clear the screen
        ansi_up total_display_lines;
        
        print_terrain(current_terrain_grid, gridWidth);
        print_overlay(terrain_counts, iteration);

        ;;; To make it a "simulation" that changes, you could
        ;;; introduce a perturbation or regeneration step here.
        ;;; For pure static generation, this loop would only print the same thing.
        ;;; For a dynamic terrain, you'd need to modify base_noise_grid over time,
        ;;; which would be quite complex with the current inferred language features.
        ;;; For now, it just continuously renders the same generated terrain.
    }
}