;;; --- BOUNCING BALLS SIMULATION (GRAPHICAL) ---
;;; Based on Spring-Mass-Damper dynamics
;;; Uses fixed-point arithmetic for simulating decimals
;;; All configuration passed via 'simConfig' pod.
;;; Now using a dedicated graphics API for rendering.

;;; --- Configuration Pod ---
pod simConfig(
    scaleFactor,
    timeStep,
    gravity,
    kStructural, kShear, kFlexion,
    cDamping,
    restLengthStructural, restLengthShear, restLengthFlexion,
    particleMass,
    bounceDamping,
    particleColorR, particleColorG, particleColorB, ;;; New: RGB for particle
    barrierColorR, barrierColorG, barrierColorB    ;;; New: RGB for barrier
);

;;; --- Barrier Pod Definition ---
pod barrier(
    x, y, width, height
);

;;; --- Utility Functions ---

fn abs(n) -> result {
    n -> result;
    if n < 0 {
        0 - n -> result;
    }
}

fn min(a, b) -> result {
    b -> result;
    if a < b {
        a -> result;
    }
}

;;; Integer square root (approximated for fixed-point distances)
fn integerSqrt(n) -> result {
    0 -> result;
    if n < 0 { 0 -> result; return; }
    if n = 0 { 0 -> result; return; }
    if n = 1 { 1 -> result; return; }

    n / 2 -> x;
    1 -> y;

    while x > y {
        (x + n / x) / 2 -> x;
        (y + n / y) / 2 -> y;
    }
    min(x, y) -> result;
}

;;; Calculates squared distance, returns (real_distance^2 * scaleFactor^2)
fn distSq(p1x, p1y, p2x, p2y) -> result {
    (p1x - p2x) -> dx; ;;; dx is (real_dx * scaleFactor)
    (p1y - p2y) -> dy; ;;; dy is (real_dy * scaleFactor)
    ;;; (dx * dx + dy * dy) is (real_dist^2 * scaleFactor^2)
    (dx * dx + dy * dy) -> result;
}

;;; --- Particle and Spring Pod Definitions ---
pod particle(
    id,             ;;; int: Unique identifier
    x, y,           ;;; int: Current position (scaled by SCALE_FACTOR)
    vx, vy,         ;;; int: Velocity (scaled by SCALE_FACTOR)
    mass,           ;;; int: Mass of the particle (scaled by SCALE_FACTOR)
    radius,         ;;; New: int: Visual radius of the particle (scaled by SCALE_FACTOR)
    fixed           ;;; bool: true if particle is fixed (e.g., boundary), false otherwise
);

pod spring(
    p1Id, p2Id,     ;;; IDs of connected particles
    type            ;;; "structural", "shear", "flexion"
);

;;; --- Particle and Spring Lookup ---

;;; Gets index of particle by ID
fn findParticleIndexById(particlesList, targetId) -> index {
    0 -> i;
    -1 -> index; ;;; Not found
    while i < length(particlesList) {
        particlesList:i -> p;
        if p:id = targetId {
            i -> index;
            return;
        }
        i + 1 -> i;
    }
}

;;; --- Core Physics Functions ---

;;; Applies spring forces between two particles
;;; Returns the {fx, fy} force applied to p1 (p2 gets -fx, -fy)
fn calculateSpringForce(
    p1x, p1y, p1vx, p1vy,
    p2x, p2y, p2vx, p2vy,
    restLength, k, c, scaleFactor
) -> resultForce {
    (p1x - p2x) -> dx; ;;; dx is (real_dx * scaleFactor)
    (p1y - p2y) -> dy; ;;; dy is (real_dy * scaleFactor)
    {0, 0} -> resultForce; ;;; initialize

    ;;; trueSquaredDistScaled is (real_distance^2 * scaleFactor^2)
    distSq(p1x, p1y, p2x, p2y) -> trueSquaredDistScaled;
    
    if trueSquaredDistScaled < 1 { ;;; Avoid division by zero for very small distances (effectively 0)
        {0, 0} -> resultForce;
        return;
    }

    ;;; currentDistScaled is (real_distance * scaleFactor)
    integerSqrt(trueSquaredDistScaled) -> currentDistScaled;

    ;;; Ensure currentDistScaled is not zero for division
    if currentDistScaled = 0 {
        {0, 0} -> resultForce;
        return;
    }

    ;;; Spring Force calculation (scaled)
    ;;; displacementScaled is (real_displacement * scaleFactor)
    (currentDistScaled - restLength) -> displacementScaled;

    ;;; F_s_magnitude_scaled = (real_k * real_displacement * scaleFactor)
    (k * displacementScaled) -> springMagnitudeScaled;

    ;;; Damping Force calculation (scaled)
    (p1vx - p2vx) -> dvx; ;;; dvx is (real_dvx * scaleFactor)
    (p1vy - p2vy) -> dvy; ;;; dvy is (real_dvy * scaleFactor)

    ;;; Project relative velocity onto spring direction
    ;;; (dvx * dx + dvy * dy) is (scaled_vel * scaled_dx) which is (real_vel * real_dx * scaleFactor^2)
    ;;; Divided by currentDistScaled (real_dist * scaleFactor) -> (real_relative_vel * scaleFactor)
    (dvx * dx + dvy * dy) / currentDistScaled -> relativeVelocityScaled;
    
    ;;; F_d_magnitude_scaled = (real_c * real_relative_vel * scaleFactor)
    (c * relativeVelocityScaled) -> dampingMagnitudeScaled;

    ;;; --- Calculate Directional Components carefully for fixed-point division ---
    ;;; Pattern for fixed-point division X/Y where X, Y are scaled and result should be scaled: (X * scaleFactor) / Y
    ;;; However, here we need (real_dx / real_dist) * scaleFactor
    ;;; (dx is real_dx * SF, currentDistScaled is real_dist * SF)
    ;;; So, `(dx * scaleFactor) / currentDistScaled` yields (real_dx / real_dist) * SF
    ((dx * scaleFactor) / currentDistScaled) -> dx_ratio_scaled;
    ((dy * scaleFactor) / currentDistScaled) -> dy_ratio_scaled;

    ;;; Now apply to magnitude:
    ;;; `springMagnitudeScaled` is `real_Fs * SF`
    ;;; `dx_ratio_scaled` is `(real_dx / real_dist) * SF`
    ;;; We want `(real_Fs * real_dx / real_dist) * SF`
    ;;; Formula: `(Magnitude_scaled * Ratio_scaled) / scaleFactor`
    ;;; Trace: ((real_Fs * SF) * (real_dx / real_dist * SF)) / SF
    ;;;        = (real_Fs * real_dx / real_dist) * SF
    (springMagnitudeScaled * dx_ratio_scaled) / scaleFactor -> springFxComponent;
    (springMagnitudeScaled * dy_ratio_scaled) / scaleFactor -> springFyComponent;

    (dampingMagnitudeScaled * dx_ratio_scaled) / scaleFactor -> dampingFxComponent;
    (dampingMagnitudeScaled * dy_ratio_scaled) / scaleFactor -> dampingFyComponent;

    ;;; Total force (real_F_total * scaleFactor)
    (springFxComponent + dampingFxComponent) -> totalFx;
    (springFyComponent + dampingFyComponent) -> totalFy;

    {totalFx, totalFy} -> resultForce;
}

;;; Updates particle positions based on forces and applies boundary conditions
fn updateParticles(allParticles, allSprings, config, canvasWidth, canvasHeight, allBarriers) -> newParticlesState {
    config:scaleFactor -> scaleFactor;
    config:timeStep -> timeStep;
    config:gravity -> gravity;
    config:bounceDamping -> bounceDamping;

    config:kStructural -> kStructural;
    config:kShear -> kShear;
    config:kFlexion -> kFlexion;
    config:cDamping -> cDamping;
    config:restLengthStructural -> restLengthStructural;
    config:restLengthShear -> restLengthShear;
    config:restLengthFlexion -> restLengthFlexion;

    [] -> updatedParticles;
    [] -> particleForcesAcc; ;;; Accumulator for forces for each particle: {fx, fy}

    ;;; Initialize force accumulators for each particle to zero
    0 -> i;
    while i < length(allParticles) {
        {0, 0} -> $particleForcesAcc;
        i + 1 -> i;
    }

    ;;; Step 1: Accumulate forces from all springs
    0 -> s_idx;
    while s_idx < length(allSprings) {
        allSprings:s_idx -> currentSpring;
        currentSpring:p1Id -> p1_id;
        currentSpring:p2Id -> p2_id;
        currentSpring:type -> springType;

        findParticleIndexById(allParticles, p1_id) -> p1_idx;
        findParticleIndexById(allParticles, p2_id) -> p2_idx;

        if p1_idx = -1 || p2_idx = -1 {
            s_idx + 1 -> s_idx;
            continue; ;;; Skip invalid spring
        }

        allParticles:p1_idx -> p1;
        allParticles:p2_idx -> p2;

        ;;; Determine rest length and k based on spring type
        0 -> restL;
        0 -> k_val;
        if springType = "structural" {
            restLengthStructural -> restL;
            kStructural -> k_val;
        } elseif springType = "shear" {
            restLengthShear -> restL;
        } elseif springType = "flexion" {
            restLengthFlexion -> restL;
            kFlexion -> k_val;
        }

        calculateSpringForce(
            p1:x, p1:y, p1:vx, p1:vy,
            p2:x, p2:y, p2:vx, p2:vy,
            restL, k_val, cDamping, scaleFactor
        ) -> forceOnP1;

        forceOnP1:0 -> fx_p1;
        forceOnP1:1 -> fy_p1;

        ;;; Add force to p1's accumulator
        particleForcesAcc:p1_idx -> p1_acc_forces;
        ((p1_acc_forces:0) + fx_p1) -> p1_acc_forces:0;
        ((p1_acc_forces:1) + fy_p1) -> p1_acc_forces:1;
        p1_acc_forces -> particleForcesAcc:p1_idx;

        ;;; Add opposite force to p2's accumulator
        particleForcesAcc:p2_idx -> p2_acc_forces;
        ((p2_acc_forces:0) - fx_p1) -> p2_acc_forces:0;
        ((p2_acc_forces:1) - fy_p1) -> p2_acc_forces:1;
        p2_acc_forces -> particleForcesAcc:p2_idx;

        s_idx + 1 -> s_idx;
    }

    ;;; Step 2: Apply accumulated forces, gravity, and update positions
    0 -> p_idx;
    while p_idx < length(allParticles) {
        allParticles:p_idx -> p;

        p:id -> id;
        p:x -> x;
        p:y -> y;
        p:vx -> vx;
        p:vy -> vy;
        p:mass -> mass;
        p:radius -> radius; ;;; Get particle radius
        p:fixed -> fixed;

        if fixed { ;;; Fixed particles don't move
            particle(id, x, y, vx, vy, mass, radius, fixed) -> $updatedParticles; ;;; Preserve radius
            p_idx + 1 -> p_idx;
            continue;
        }

        particleForcesAcc:p_idx -> currentForces;
        currentForces:0 -> fx_total;
        currentForces:1 -> fy_total;

        ;;; Apply Gravity (always downward) - gravity is already scaled by scaleFactor in config
        (fy_total + gravity) -> fy_total;

        ;;; Calculate acceleration (a = F/m) (scaled)
        0 -> ax; 0 -> ay; ;;; Initialize
        if mass = 0 {
            0 -> ax;
            0 -> ay;
        } else {
            (fx_total * scaleFactor) / mass -> ax;
            (fy_total * scaleFactor) / mass -> ay;
        }

        ;;; Update velocity (v = v + a*dt) (scaled)
        (vx + (ax * timeStep)) -> new_vx;
        (vy + (ay * timeStep)) -> new_vy;

        ;;; Calculate potential new position (x = x + v*dt) (scaled)
        (x + (new_vx * timeStep)) -> potentialNewX;
        (y + (new_vy * timeStep)) -> potentialNewY;

        ;;; Initialize final position and velocity to potential values
        potentialNewX -> finalX;
        potentialNewY -> finalY;
        new_vx -> finalVx;
        new_vy -> finalVy;

        ;;; --- Barrier Collision Detection and Response (for all barriers) ---
        0 -> b_idx;
        while b_idx < length(allBarriers) {
            allBarriers:b_idx -> currentBarrier;

            ;;; Convert barrier coordinates to scaled values for comparison
            (currentBarrier:x * scaleFactor) -> scaledBarrierX;
            (currentBarrier:y * scaleFactor) -> scaledBarrierY;
            ((currentBarrier:x + currentBarrier:width) * scaleFactor) -> scaledBarrierRightX;
            ((currentBarrier:y + currentBarrier:height) * scaleFactor) -> scaledBarrierBottomY;

            ;;; Adjust particle bounds for collision (particle is a circle)
            (potentialNewX - radius) -> pLeft;
            (potentialNewX + radius) -> pRight;
            (potentialNewY - radius) -> pTop;
            (potentialNewY + radius) -> pBottom;

            ;;; Check for AABB overlap with barrier
            if pRight > scaledBarrierX && pLeft < scaledBarrierRightX &&
               pBottom > scaledBarrierY && pTop < scaledBarrierBottomY {
                ;;; Collision with barrier detected - particle is overlapping

                ;;; Find the minimal overlap axis to determine collision normal
                (pRight - scaledBarrierX) -> overlapRight;
                (scaledBarrierRightX - pLeft) -> overlapLeft;
                (pBottom - scaledBarrierY) -> overlapBottom;
                (scaledBarrierBottomY - pTop) -> overlapTop;

                min(overlapLeft, overlapRight) -> minXOverlap;
                min(overlapTop, overlapBottom) -> minYOverlap;

                if minXOverlap < minYOverlap { ;;; Collision was primarily horizontal
                    if overlapLeft < overlapRight { ;;; Came from right, push to left edge of barrier
                        (scaledBarrierX - radius) -> finalX;
                    } else { ;;; Came from left, push to right edge of barrier
                        (scaledBarrierRightX + radius) -> finalX;
                    }
                    0 - (finalVx * bounceDamping) / 100 -> finalVx;
                    if abs(finalVx) < (50 * scaleFactor) / 1000 { 0 -> finalVx; }
                } else { ;;; Collision was primarily vertical
                    if overlapTop < overlapBottom { ;;; Came from bottom, push to top edge of barrier
                        (scaledBarrierY - radius) -> finalY;
                    } else { ;;; Came from top, push to bottom edge of barrier
                        (scaledBarrierBottomY + radius) -> finalY;
                    }
                    0 - (finalVy * bounceDamping) / 100 -> finalVy;
                    if abs(finalVy) < (50 * scaleFactor) / 1000 { 0 -> finalVy; }
                }
            }
            b_idx + 1 -> b_idx;
        }
        ;;; --- End Barrier Collision ---

        ;;; --- Boundary Collision (using canvas dimensions) ---
        ;;; Floor collision
        ((canvasHeight * scaleFactor) - radius) -> floorY;
        if finalY >= floorY {
            floorY -> finalY;
            0 - (finalVy * bounceDamping) / 100 -> finalVy; ;;; Reverse and damp velocity (scaled percentage)
            if abs(finalVy) < (50 * scaleFactor) / 1000 { ;;; Check against a smaller threshold like 0.05 scaled
                0 -> finalVy;
            }
        }

        ;;; Left wall collision
        (0 + radius) -> leftWallX;
        if finalX <= leftWallX {
            leftWallX -> finalX;
            0 - (finalVx * bounceDamping) / 100 -> finalVx;
            if abs(finalVx) < (50 * scaleFactor) / 1000 {
                0 -> finalVx;
            }
        }

        ;;; Right wall collision
        ((canvasWidth * scaleFactor) - radius) -> rightWallX;
        if finalX >= rightWallX {
            rightWallX -> finalX;
            0 - (finalVx * bounceDamping) / 100 -> finalVx;
            if abs(finalVx) < (50 * scaleFactor) / 1000 {
                0 -> finalVx;
            }
        }

        ;;; Top wall collision
        (0 + radius) -> topWallY;
        if finalY <= topWallY {
            topWallY -> finalY;
            0 - (finalVy * bounceDamping) / 100 -> finalVy;
            if abs(finalVy) < (50 * scaleFactor) / 1000 {
                0 -> finalVy;
            }
        }

        ;;; Store updated particle
        particle(id, finalX, finalY, finalVx, finalVy, mass, radius, fixed) -> $updatedParticles;
        p_idx + 1 -> p_idx;
    }
    updatedParticles -> newParticlesState;
}

;;; Main program loop for bouncy ball simulation
start {
    arg(0) -> canvasWidth;
    arg(1) -> canvasHeight;
    arg(2) -> numParticles;

    ;;; Initialize graphics canvas
    init_graphics_canvas(canvasWidth, canvasHeight, 1, 1); ;;; Set aspect ratio to 1:1

    ;;; Initialize key board handler
    init_key_handler();

    ;;; --- Barrier Configuration (now for random generation) ---
    2 -> minBarriers;
    5 -> maxBarriers; ;;; Generate between 7 and 10 barriers
    50 -> minBarrierWidth_px;
    150 -> maxBarrierWidth_px;
    20 -> minBarrierHeight_px;
    50 -> maxBarrierHeight_px;

    ;;; RGB for barrier
    200 -> barrierR;
    100 -> barrierG;
    0 -> barrierB;
    
    [] -> allBarriers; ;;; List to store all barrier pods

    ;;; --- Initialize Configuration ---
    1000 -> scaleFactor; ;;; 1 unit in simulation = 1000 scaled units
    1 -> timeStep;       ;;; 1 scaled unit of time
    (1500 * scaleFactor) / 1000 -> gravity; ;;; Adjusted gravity to be more noticeable

    200 -> kStructural;
    150 -> kShear;
    100 -> kFlexion;

    50 -> cDamping;
    (100 * scaleFactor) / 1000 -> restLengthStructural;
    (141 * scaleFactor) / 1000 -> restLengthShear;
    (200 * scaleFactor) / 1000 -> restLengthFlexion;

    (1 * scaleFactor) -> particleMass; ;;; Base mass for particles
    75 -> bounceDamping; ;;; 75% velocity retained after bounce

    ;;; RGB for particle
    100 -> particleR;
    100 -> particleG;
    255 -> particleB;

    ;;; New particle visual radius in pixels
    10 -> particleVisualRadiusPx;
    (particleVisualRadiusPx * scaleFactor) -> particleSimRadius; ;;; Radius in scaled units for physics

    simConfig(
        scaleFactor, timeStep, gravity,
        kStructural, kShear, kFlexion,
        cDamping,
        restLengthStructural, restLengthShear, restLengthFlexion,
        particleMass,
        bounceDamping,
        particleR, particleG, particleB,
        barrierR, barrierG, barrierB
    ) -> myConfig;

    [] -> allParticles;
    [] -> allSprings;

    0 -> particleIdCounter;
    ;;; --- Random Placement of Particles ---
    numParticles -> totalParticlesToSpawn;
    0 -> p_count;

    ;;; Define the top spawn area (in unscaled pixel coordinates)
    ;;; Spawn in the top quarter of the canvas, ensuring not to spawn too close to Y=0
    (canvasWidth - particleVisualRadiusPx) -> spawnMaxX_px;
    (canvasHeight / 4) -> spawnMaxY_px;
    (particleVisualRadiusPx + 1) -> spawnMinY_px; ;;; Ensure minimum Y for spawning

    ;;; Random mass setup
    (800 * myConfig:scaleFactor) / 1000 -> minRandomMass; ;;; 0.8 scaled
    (1500 * myConfig:scaleFactor) / 1000 -> maxRandomMass; ;;; 1.5 scaled
    (maxRandomMass - minRandomMass) -> massRange;

    while p_count < totalParticlesToSpawn {
        ;;; Generate random unscaled coordinates (pixels)
        random(spawnMaxX_px - (2 * particleVisualRadiusPx)) + particleVisualRadiusPx -> randomPxX;
        random(spawnMaxY_px - spawnMinY_px) + spawnMinY_px -> randomPxY;

        ;;; Convert to scaled coordinates for simulation
        (randomPxX * myConfig:scaleFactor) -> startX_scaled;
        (randomPxY * myConfig:scaleFactor) -> startY_scaled;

        ;;; Get random mass
        random(massRange) + minRandomMass -> currentParticleMass;

        ;;; Initial velocity (scaled, small random for slight movement)
        random(2000) -> initialXVel_scaled; ;;; max 2.0 real velocity
        if random(100) < 50 { ;;; 50% chance to go left
            0 - initialXVel_scaled -> initialXVel_scaled;
        }
        (random(1000)) -> initialYVel_scaled; ;;; Small initial downward push

        particle(particleIdCounter, startX_scaled, startY_scaled,
                 initialXVel_scaled, initialYVel_scaled,
                 currentParticleMass, particleSimRadius, false) -> newParticle;
        newParticle -> $allParticles;
        particleIdCounter + 1 -> particleIdCounter;
        p_count + 1 -> p_count;
    }

    ;;; --- Generate Random Barriers ---
    random(maxBarriers - minBarriers + 1) + minBarriers -> numBarriersToGenerate;
    0 -> b_gen_count;
    while b_gen_count < numBarriersToGenerate {
        random(maxBarrierWidth_px - minBarrierWidth_px + 1) + minBarrierWidth_px -> currentBarrierWidth_px;
        random(maxBarrierHeight_px - minBarrierHeight_px + 1) + minBarrierHeight_px -> currentBarrierHeight_px;

        ;;; Ensure barrier is placed fully within the canvas, avoiding top quarter where balls spawn
        random(canvasWidth - currentBarrierWidth_px) -> currentBarrierX_px;
        random(canvasHeight - (canvasHeight / 4) - currentBarrierHeight_px) + (canvasHeight / 4) -> currentBarrierY_px;

        barrier(currentBarrierX_px, currentBarrierY_px, currentBarrierWidth_px, currentBarrierHeight_px) -> newBarrier;
        newBarrier -> $allBarriers;
        b_gen_count + 1 -> b_gen_count;
    }

    ;;; `allSprings` remains empty as this is a bouncy ball simulation (not a deformable cloth)
    ;;; Inter-particle collision would require separate logic (e.g., circle-circle collision and resolution)

    0 -> steps;

    while true {
        steps + 1 -> steps;

        ;;; 1. Clear the canvas (e.g., to black or background color)
        ;;; Assumed `graphics_process` clears the canvas, or there's a `clear_canvas` call.
        ;;; If not, you might need a `fillRect(0, 0, canvasWidth, canvasHeight, 0, 0, 0);` here.
        ;;; For now, assume graphics_process handles background clear.

        ;;; 2. Update particle positions and velocities
        updateParticles(allParticles, allSprings, myConfig, canvasWidth, canvasHeight, allBarriers) -> allParticles;

        ;;; 3. Render all barriers
        0 -> b_render_idx;
        while b_render_idx < length(allBarriers) {
            allBarriers:b_render_idx -> b;
            fillRect(b:x, b:y, b:width, b:height, myConfig:barrierColorR, myConfig:barrierColorG, myConfig:barrierColorB);
            b_render_idx + 1 -> b_render_idx;
        }
            
        ;;; 4. Render particles
        0 -> p_render_idx;
        while p_render_idx < length(allParticles) {
            allParticles:p_render_idx -> p;
            ;;; Convert scaled coordinates back to pixel coordinates for rendering
            ((p:x) / myConfig:scaleFactor) -> displayX_px;
            ((p:y) / myConfig:scaleFactor) -> displayY_px;
            ((p:radius) / myConfig:scaleFactor) -> displayRadius_px; ;;; Convert radius too

            fillCircle(displayX_px, displayY_px, displayRadius_px,
                       myConfig:particleColorR, myConfig:particleColorG, myConfig:particleColorB);
            p_render_idx + 1 -> p_render_idx;
        }

        ;;; 5. Update the graphics window
        graphics_process();

        ;;; Display debug info (optional, might need a text rendering API)
        ;;; prn " Steps: " + steps;

        ;;; Handle key presses
        get_key_press() -> key;
        [] -> newParticles;
        if key:available = true && key:key = 'r' {
            for particle in allParticles {
                random(10000) -> initialXVel_scaled;
                if random(100) < 50 {
                    0 - initialXVel_scaled -> initialXVel_scaled;
                }
                (random(100000)) -> initialYVel_scaled;

                particle(particle:id, particle:x, particle:y,
                         initialXVel_scaled, initialYVel_scaled,
                         particle:mass, particle:radius, particle:fixed) -> $newParticles;
            }
            newParticles -> allParticles;
        }

        ;;; delay(10); ;;; A small delay might be needed depending on graphics_process speed
    }
}