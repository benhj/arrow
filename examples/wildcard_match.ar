fn tail(list) -> result {
    [] -> result;
    if(list matches [= ??tail]) {
        tail -> result;
    }
}

fn to_list(str) -> list {
    [] -> list;
    for i in str {
        [^^list ^i] -> list;
    }
}

fn list_length(list) -> length {
    0 -> length;
    for i in list {
        length + 1 -> length;
    }
}

;;; buggy wildcard matching algorithm. This
;;; is a non-trivial problem and needs much refinement.
fn wildcard_match(needle, haystack) -> result {

    false -> result;

    0 -> needleCounter;
    list_length(needle) -> needleLength;

    for i in needle {
        if(i = '?') {
            if(haystack = []) {
                false -> result;
                return;
            } else {
                tail(haystack) -> haystack;
            }
        } elseif (i = '*') {

            if((needleCounter + 1) = needleLength) {
                true -> result;
                return;
            }

            list_length(haystack) -> length;
            0 -> j;
            tail(needle) -> newNeedle;
            haystack -> newHaystack;
            while(j < length) {
                if(wildcard_match(newNeedle, newHaystack)) {
                    true -> result;
                    return;
                }
                tail(newHaystack) -> newHaystack;
                j + 1 -> j;
            }
            false -> result;
            return;
        } else {
            haystack:0 -> head;
            tail(haystack) -> newHaystack;
            if(head /= i) {
                false -> result;
                return;
            } else {
                newHaystack -> haystack;
                list_length(haystack) -> len;
                if(len = 0) {
                    true -> result;
                    return;
                }
            }
        }
        needleCounter + 1 -> needleCounter;
    }
    (haystack = []) -> result;
}

start {

    "hello.pdf" -> haystack;
    "*.pdf" -> needle;
    wildcard_match(to_list(needle), to_list(haystack)) -> matched;
    prn matched;
}